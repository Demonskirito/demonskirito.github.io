<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>网络编程 on 念云的博客</title>
        <link>https://demonskirito.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</link>
        <description>Recent content in 网络编程 on 念云的博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>随.</copyright>
        <lastBuildDate>Sat, 18 Jan 2025 16:30:12 +0800</lastBuildDate><atom:link href="https://demonskirito.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>网络编程</title>
        <link>https://demonskirito.github.io/p/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</link>
        <pubDate>Sat, 18 Jan 2025 16:30:12 +0800</pubDate>
        
        <guid>https://demonskirito.github.io/p/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</guid>
        <description>&lt;h1 id=&#34;参考文献&#34;&gt;参考文献
&lt;/h1&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/Gabriel576282253/article/details/116392228&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TCP 三次握手中 SYN，ACK，seq ack 的含义_syn seq ack-CSDN 博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/yi_chengyu/article/details/120467256&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;socket 网络编程——多进程、多线程处理并发_socket 客户端多线程并发-CSDN 博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/russell_tao/article/details/9111769&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;高性能网络编程（一）&amp;mdash;-accept 建立连接-CSDN 博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/zengzy/p/5107516.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;socket 原理详解 - zengzy - 博客园&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;socket&#34;&gt;Socket
&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Socket&lt;/strong&gt; 是计算机网络编程中一个非常重要的概念，它提供了一种在网络中进行通信的接口，通常用于在客户端和服务器之间传输数据。我们可以把 Socket 看作是应用程序和网络之间的中介，利用它可以实现不同主机或同一主机上不同进程之间的通信。&lt;/p&gt;
&lt;h3 id=&#34;1-socket-基本概念&#34;&gt;1. &lt;strong&gt;Socket 基本概念&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;Socket 是一个抽象层，封装了 TCP/IP 协议栈中用于数据传输的底层实现。它为应用程序提供了一套网络通信接口，程序通过 Socket 发送和接收数据。&lt;/p&gt;
&lt;p&gt;Socket 主要有以下几个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IP 地址&lt;/strong&gt;：唯一标识网络中一台设备（例如，&lt;code&gt;192.168.1.1&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;端口号&lt;/strong&gt;：标识设备上某个特定的应用程序或服务（例如，HTTP 使用端口 80，MySQL 使用端口 3306）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协议&lt;/strong&gt;：指示 Socket 使用的传输协议，常见的有 &lt;strong&gt;TCP&lt;/strong&gt; 和 &lt;strong&gt;UDP&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-socket-类型&#34;&gt;2. &lt;strong&gt;Socket 类型&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;根据传输协议的不同，Socket 可以分为以下几种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;流套接字（Stream Socket）&lt;/strong&gt;：基于 TCP 协议，提供可靠、有序、双向的通信。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据报套接字（Datagram Socket）&lt;/strong&gt;：基于 UDP 协议，提供不可靠、无连接、单向或双向的通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常见的类型是 &lt;strong&gt;流套接字&lt;/strong&gt;，它通过 TCP 协议实现可靠的数据传输。&lt;/p&gt;
&lt;h3 id=&#34;3-socket-编程模型&#34;&gt;3. &lt;strong&gt;Socket 编程模型&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;Socket 编程通常是基于客户端/服务器的模型，涉及到两个主要步骤：创建套接字、绑定和监听（服务器端），连接和数据交换（客户端）。以下是这个模型的工作流程：&lt;/p&gt;
&lt;h4 id=&#34;31-服务器端工作流程&#34;&gt;3.1 服务器端工作流程
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;创建 Socket&lt;/strong&gt;： 服务器端首先需要创建一个 Socket，这样它才能在网络中接收和发送数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;绑定地址和端口&lt;/strong&gt;： 通过 &lt;code&gt;bind()&lt;/code&gt; 函数将套接字与本机的某个 IP 地址和端口号绑定在一起。例如，绑定到 &lt;code&gt;127.0.0.1:12345&lt;/code&gt;，这样其他计算机就可以通过这个 IP 地址和端口连接到该服务器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监听连接&lt;/strong&gt;： 通过 &lt;code&gt;listen()&lt;/code&gt; 函数，服务器端告诉操作系统它准备好接受连接请求了。监听的队列大小是一个可以配置的值，表示最大能同时处理的客户端连接数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;接受连接&lt;/strong&gt;： 使用 &lt;code&gt;accept()&lt;/code&gt; 函数接受客户端的连接请求。此函数会阻塞，直到有客户端发起连接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据传输&lt;/strong&gt;： 一旦连接建立，服务器就可以使用 &lt;code&gt;recv()&lt;/code&gt; 接收客户端发送的数据，使用 &lt;code&gt;send()&lt;/code&gt; 或 &lt;code&gt;sendall()&lt;/code&gt; 发送响应数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关闭连接&lt;/strong&gt;： 通过 &lt;code&gt;close()&lt;/code&gt; 关闭 Socket，释放资源。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;32-客户端工作流程&#34;&gt;3.2 客户端工作流程
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;创建 Socket&lt;/strong&gt;： 客户端与服务器一样，也需要创建一个 Socket。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连接到服务器&lt;/strong&gt;： 客户端通过 &lt;code&gt;connect()&lt;/code&gt; 函数向服务器发起连接请求。需要指定服务器的 IP 地址和端口号。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据传输&lt;/strong&gt;： 一旦连接成功，客户端可以通过 &lt;code&gt;send()&lt;/code&gt; 发送数据，通过 &lt;code&gt;recv()&lt;/code&gt; 接收服务器的响应。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关闭连接&lt;/strong&gt;： 通过 &lt;code&gt;close()&lt;/code&gt; 函数关闭与服务器的连接。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;4-数据传输&#34;&gt;4. &lt;strong&gt;数据传输&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;Socket 允许在客户端和服务器之间交换数据。具体来说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TCP 协议&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可靠&lt;/strong&gt;：TCP 确保数据传输的可靠性，确保数据包按顺序到达，不丢失。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流式数据传输&lt;/strong&gt;：TCP 通过流的方式进行数据传输，不以固定大小的数据包为单位。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;面向连接&lt;/strong&gt;：TCP 在数据传输之前需要建立连接（通过三次握手），且通信结束后需要断开连接（四次挥手）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UDP 协议&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不可靠&lt;/strong&gt;：UDP 不保证数据传输的可靠性，也不保证数据的顺序。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据报文&lt;/strong&gt;：UDP 通过数据报的方式进行数据传输，每个数据报大小固定。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无连接&lt;/strong&gt;：UDP 不需要建立连接，发送数据时直接发给目标地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-tcpip-套接字的工作原理&#34;&gt;5. &lt;strong&gt;TCP/IP 套接字的工作原理&lt;/strong&gt;
&lt;/h3&gt;&lt;h4 id=&#34;51-tcp-三次握手建立连接&#34;&gt;5.1 TCP 三次握手（建立连接）
&lt;/h4&gt;&lt;p&gt;当客户端和服务器需要建立 TCP 连接时，它们需要进行三次握手：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;客户端发送 SYN 包&lt;/strong&gt;：客户端向服务器发送一个带有 SYN 标志的数据包，表示客户端希望建立连接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务器响应 SYN-ACK 包&lt;/strong&gt;：服务器接收到 SYN 包后，向客户端发送一个带有 SYN 和 ACK 标志的数据包，表示接受连接请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户端响应 ACK 包&lt;/strong&gt;：客户端收到服务器的 SYN-ACK 包后，向服务器发送一个带有 ACK 标志的数据包，表示连接成功。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;此时，客户端和服务器之间的连接建立起来，可以开始数据传输。&lt;/p&gt;
&lt;h4 id=&#34;52-tcp-四次挥手断开连接&#34;&gt;5.2 TCP 四次挥手（断开连接）
&lt;/h4&gt;&lt;p&gt;当客户端或服务器要关闭连接时，必须通过四次挥手来断开连接：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;发送 FIN 包&lt;/strong&gt;：发送方发送一个 FIN 包，表示没有数据要发送了。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;回应 ACK 包&lt;/strong&gt;：接收方确认收到 FIN 包，并发送 ACK 包。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;发送 FIN 包&lt;/strong&gt;：接收方在完成数据传输后，发送自己的 FIN 包。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;回应 ACK 包&lt;/strong&gt;：发送方确认接收到 FIN 包，并回复 ACK 包，连接断开。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;6-socket-的应用场景&#34;&gt;6. &lt;strong&gt;Socket 的应用场景&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;Socket 技术广泛应用于以下场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Web 服务&lt;/strong&gt;：客户端（浏览器）通过 HTTP 协议与服务器通信，HTTP 通常通过 TCP 套接字进行数据传输。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;即时通讯软件&lt;/strong&gt;：如 QQ、微信等，通过 Socket 实现点对点的实时消息传输。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文件传输&lt;/strong&gt;：通过 Socket 实现文件的上传和下载。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分布式系统&lt;/strong&gt;：在微服务架构中，服务之间通常通过 Socket 或基于 Socket 的协议进行通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7-示例代码基于-socket-的客户端服务器通信&#34;&gt;7. &lt;strong&gt;示例代码：基于 Socket 的客户端/服务器通信&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;服务器端（Python）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import socket
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 创建TCP/IP套接字
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 绑定IP地址和端口
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server_socket.bind((&amp;#39;localhost&amp;#39;, 12345))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 开始监听连接
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server_socket.listen(1)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;print(&amp;#34;服务器在等待连接...&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 接受客户端连接
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;client_socket, client_address = server_socket.accept()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;print(f&amp;#34;连接来自: {client_address}&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 接收数据
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;data = client_socket.recv(1024)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;print(f&amp;#34;接收到的数据: {data.decode()}&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 发送数据
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;client_socket.sendall(b&amp;#34;Hello from server!&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 关闭连接
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;client_socket.close()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server_socket.close()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;客户端（Python）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import socket
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 创建TCP/IP套接字
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 连接到服务器
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;client_socket.connect((&amp;#39;localhost&amp;#39;, 12345))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 发送数据
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;client_socket.sendall(b&amp;#34;Hello from client!&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 接收服务器响应
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;data = client_socket.recv(1024)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;print(f&amp;#34;接收到的数据: {data.decode()}&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 关闭连接
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;client_socket.close()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;8-socket-详细内部机制&#34;&gt;8. &lt;strong&gt;Socket 详细内部机制&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;为了更深入地理解 Socket 的工作原理，下面我们讨论一下 Socket 的一些更细节的工作机制，包括连接、数据传输、处理并发等方面。&lt;/p&gt;
&lt;h4 id=&#34;81-socket-的内部结构&#34;&gt;8.1 &lt;strong&gt;Socket 的内部结构&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;Socket 是对网络协议栈的一个抽象，其本质上是一个与协议栈交互的接口。大多数操作系统都有一个内核层来管理网络连接和数据传输，Socket 是应用程序通过该接口与内核进行交互的桥梁。&lt;/p&gt;
&lt;p&gt;具体来说，Socket 的操作大致分为三个部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;套接字操作接口（API）&lt;/strong&gt;：这部分是应用程序开发者使用的接口，常见的接口包括 &lt;code&gt;socket()&lt;/code&gt;, &lt;code&gt;bind()&lt;/code&gt;, &lt;code&gt;listen()&lt;/code&gt;, &lt;code&gt;accept()&lt;/code&gt;, &lt;code&gt;connect()&lt;/code&gt;, &lt;code&gt;send()&lt;/code&gt;, &lt;code&gt;recv()&lt;/code&gt; 等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协议栈（TCP/IP 栈）&lt;/strong&gt;：操作系统提供的协议栈负责协议的处理，包括数据的分段、流量控制、错误校验等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络接口&lt;/strong&gt;：通过底层的网络硬件（如网卡），与物理网络进行通信。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;82-如何建立和关闭连接&#34;&gt;8.2 &lt;strong&gt;如何建立和关闭连接&lt;/strong&gt;
&lt;/h4&gt;&lt;h5 id=&#34;连接建立三次握手&#34;&gt;&lt;strong&gt;连接建立（三次握手）&lt;/strong&gt;
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;SYN：客户端发送连接请求&lt;/strong&gt;&lt;br&gt;
客户端首先通过发送一个 TCP 数据包（SYN 包）到服务器端，表明它希望与服务器建立连接。此时，客户端进入 &lt;strong&gt;SYN_SENT&lt;/strong&gt; 状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SYN-ACK：服务器响应&lt;/strong&gt;&lt;br&gt;
服务器接收到客户端的 SYN 包后，会向客户端返回一个包含 SYN 和 ACK 标志的数据包，表示服务器同意建立连接。服务器进入 &lt;strong&gt;SYN_RCVD&lt;/strong&gt; 状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ACK：客户端确认&lt;/strong&gt;&lt;br&gt;
客户端接收到服务器的 SYN-ACK 包后，会再次发送一个 ACK 包给服务器，确认连接建立。此时，客户端和服务器都进入 &lt;strong&gt;ESTABLISHED&lt;/strong&gt; 状态，可以开始数据传输。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;三次握手的目的是：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确认客户端和服务器都能够接收到数据包。&lt;/li&gt;
&lt;li&gt;确保客户端和服务器之间的连接可以在数据传输过程中保持稳定和可靠。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;连接断开四次挥手&#34;&gt;&lt;strong&gt;连接断开（四次挥手）&lt;/strong&gt;
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;FIN：发送端请求断开&lt;/strong&gt;&lt;br&gt;
一方（通常是客户端）发送一个带有 FIN 标志的数据包，表明它已经没有数据要发送了，准备关闭连接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ACK：接收端确认&lt;/strong&gt;&lt;br&gt;
接收端收到 FIN 包后，会发送一个 ACK 包进行确认，表明它已经接收到断开请求。此时，客户端进入 &lt;strong&gt;FIN_WAIT_2&lt;/strong&gt; 状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FIN：接收端请求断开&lt;/strong&gt;&lt;br&gt;
接收端发送一个 FIN 包，表明它也没有数据要发送了。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ACK：发送端确认&lt;/strong&gt;&lt;br&gt;
发送端收到 FIN 包后，会回复一个 ACK 包，确认连接完全断开。此时，连接关闭。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;四次挥手的目的是：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确保数据能够完整地传输到对方。&lt;/li&gt;
&lt;li&gt;双方都能够在确认没有数据传输的情况下安全断开连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2025/01/18/UHuf79KcZ2qhG5d.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;733402-20160107201721075-1061362000.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2025/01/18/hVjQNt2OavGLlzy.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;733402-20160107202442450-451372966.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;83-tcp-的流量控制与拥塞控制&#34;&gt;8.3 &lt;strong&gt;TCP 的流量控制与拥塞控制&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;在进行大量数据传输时，TCP 会使用一些机制来避免网络拥堵和确保数据传输的稳定性。这些机制包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;流量控制（Flow Control）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;滑动窗口&lt;/strong&gt;：TCP 通过滑动窗口机制控制发送端的数据流量，避免接收端的缓冲区溢出。&lt;/li&gt;
&lt;li&gt;每个连接都有一个发送窗口，发送端只能向接收端发送窗口大小内的数据，直到接收端确认接收到的数据后，发送窗口才会滑动。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拥塞控制（Congestion Control）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;慢启动（Slow Start）&lt;/strong&gt;：当一个新的连接开始时，TCP 会以非常小的发送窗口进行数据传输，以避免网络一开始就被过多数据压垮。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拥塞避免（Congestion Avoidance）&lt;/strong&gt;：随着数据的传输，TCP 会动态调整窗口大小，确保网络的稳定。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快速重传和快速恢复（Fast Retransmit and Fast Recovery）&lt;/strong&gt;：当数据包丢失时，TCP 会快速重传丢失的包，而不是等待超时，从而提高效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些机制保证了 TCP 连接在长时间、高数据量的传输过程中，仍能保持稳定和高效。&lt;/p&gt;
&lt;h4 id=&#34;84-socket-的缓冲区和数据包&#34;&gt;8.4 &lt;strong&gt;Socket 的缓冲区和数据包&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;在进行数据传输时，Socket 会使用操作系统的内核缓冲区来暂存数据。操作系统会将这些数据分成多个数据包来进行发送。这些数据包的大小通常由以下几个因素决定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作系统的默认设置&lt;/strong&gt;：不同操作系统的默认缓冲区大小不同，一般可以在系统配置中修改。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络带宽和延迟&lt;/strong&gt;：根据网络的带宽和延迟，操作系统会调整数据包的大小。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TCP/IP 协议栈的最大传输单元（MTU）&lt;/strong&gt;：MTU 限制了每个数据包的最大大小，超过 MTU 的数据包会被分段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些数据包会通过网络层（例如以太网、Wi-Fi）传输，最终到达目标设备并重新组装成完整的数据。&lt;/p&gt;
&lt;h4 id=&#34;85-socket-中的-io-模型&#34;&gt;8.5 &lt;strong&gt;Socket 中的 I/O 模型&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;Socket 提供了多种 I/O 模型来进行数据处理，这些模型决定了如何处理大量的并发连接。常见的 I/O 模型有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;阻塞 I/O（Blocking I/O）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;默认模式下，Socket 操作是阻塞的。客户端和服务器都需要等待操作完成后才能继续执行下一步。&lt;/li&gt;
&lt;li&gt;例如，&lt;code&gt;recv()&lt;/code&gt; 会阻塞，直到接收到数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非阻塞 I/O（Non-blocking I/O）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在非阻塞模式下，Socket 操作不会等待数据的到达，而是立即返回。如果数据未准备好，函数会返回一个错误码（例如 &lt;code&gt;EAGAIN&lt;/code&gt; 或 &lt;code&gt;EWOULDBLOCK&lt;/code&gt;），表示需要稍后重试。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I/O 多路复用（Multiplexing I/O）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用 &lt;strong&gt;&lt;code&gt;select()&lt;/code&gt;&lt;/strong&gt;、&lt;strong&gt;&lt;code&gt;poll()&lt;/code&gt;&lt;/strong&gt; 或 &lt;strong&gt;&lt;code&gt;epoll()&lt;/code&gt;&lt;/strong&gt; 等系统调用，允许在单个线程或进程中同时处理多个 Socket 连接。当某个连接有数据可读时，操作系统会通知应用程序进行处理。&lt;/li&gt;
&lt;li&gt;适用于高并发的服务器应用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异步 I/O（Asynchronous I/O）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;通过回调机制，应用程序可以在数据准备好时通知应用程序，而无需阻塞等待。&lt;/li&gt;
&lt;li&gt;异步 I/O 在高性能应用中非常有用，但其实现复杂。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在网络编程中，套接字的 &lt;strong&gt;阻塞模式&lt;/strong&gt;（Blocking Mode）和 &lt;strong&gt;非阻塞模式&lt;/strong&gt;（Non-blocking Mode）对应用程序的行为有很大的影响。下面我们将深入讨论这两种模式以及它们在不同应用程序中的行为。&lt;/p&gt;
&lt;p&gt;在 &lt;strong&gt;阻塞模式&lt;/strong&gt;下，套接字操作（例如 &lt;code&gt;accept()&lt;/code&gt;、&lt;code&gt;recv()&lt;/code&gt;、&lt;code&gt;send()&lt;/code&gt; 等）会一直等待直到完成相应操作。如果没有数据可读或没有连接请求，调用这些函数的线程会被阻塞，直到满足条件（例如接收到数据或客户端连接）。&lt;/p&gt;
&lt;h5 id=&#34;适用的应用程序&#34;&gt;&lt;strong&gt;适用的应用程序：&lt;/strong&gt;
&lt;/h5&gt;&lt;p&gt;阻塞模式适用于大多数传统的 &lt;strong&gt;单线程或简单应用程序&lt;/strong&gt;，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;传统的服务器&lt;/strong&gt;：例如，HTTP 服务器（如 Apache），它每次处理一个请求时，都会阻塞等待客户端连接。每当有新的连接请求，服务器会通过 &lt;code&gt;accept()&lt;/code&gt; 接收连接，然后通过 &lt;code&gt;recv()&lt;/code&gt; 读取客户端请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简单的客户端&lt;/strong&gt;：客户端程序也通常在发送数据或接收数据时使用阻塞模式，尤其是在单次请求响应场景下。例如，一个简单的 &lt;strong&gt;TCP 客户端&lt;/strong&gt;，在发送请求后，它会阻塞并等待服务器的响应。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;阻塞模式的优点是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;简单易用&lt;/strong&gt;：因为操作是阻塞的，程序员不需要考虑事件通知或轮询。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适合单线程或少量并发的应用&lt;/strong&gt;：适合并发量不高、没有复杂并发控制需求的应用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;阻塞模式的缺点是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;低效&lt;/strong&gt;：如果程序需要处理大量并发连接，使用阻塞模式会导致每个连接都被单独阻塞，浪费系统资源，导致性能问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;延迟较高&lt;/strong&gt;：每次都需要等待 I/O 操作完成，可能导致响应延迟较高，特别是在高并发情况下。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码示例（阻塞模式）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import socket
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 创建套接字
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 绑定端口
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server_socket.bind((&amp;#39;localhost&amp;#39;, 8080))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 设置监听
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server_socket.listen(5)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;print(&amp;#34;Server listening on port 8080...&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 阻塞等待客户端连接
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;client_socket, client_address = server_socket.accept()  # 阻塞
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;print(&amp;#34;Accepted connection from&amp;#34;, client_address)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 接收数据
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;data = client_socket.recv(1024)  # 阻塞，直到收到数据
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;print(&amp;#34;Received data:&amp;#34;, data)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 关闭连接
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;client_socket.close()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server_socket.close()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在 &lt;strong&gt;非阻塞模式&lt;/strong&gt;下，套接字的操作不会阻塞程序。如果操作不能立即完成，相关函数（例如 &lt;code&gt;accept()&lt;/code&gt;、&lt;code&gt;recv()&lt;/code&gt;）会立刻返回，而不会等待或停滞。通常，非阻塞模式会返回一个错误码（如 &lt;code&gt;EAGAIN&lt;/code&gt; 或 &lt;code&gt;EWOULDBLOCK&lt;/code&gt;），表示没有可用的数据或没有客户端连接。&lt;/p&gt;
&lt;h5 id=&#34;适用的应用程序-1&#34;&gt;&lt;strong&gt;适用的应用程序：&lt;/strong&gt;
&lt;/h5&gt;&lt;p&gt;非阻塞模式适用于 &lt;strong&gt;高并发、事件驱动的应用程序&lt;/strong&gt;，特别是需要同时处理多个连接的场景。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;高并发的网络服务器&lt;/strong&gt;：如 &lt;strong&gt;WebSocket 服务器&lt;/strong&gt; 或 &lt;strong&gt;高并发 HTTP 服务器&lt;/strong&gt;，这些应用程序需要同时处理大量的客户端连接。为了避免阻塞，通常会使用非阻塞模式结合 &lt;strong&gt;I/O 多路复用&lt;/strong&gt;（如 &lt;code&gt;select()&lt;/code&gt;、&lt;code&gt;poll()&lt;/code&gt; 或 &lt;code&gt;epoll()&lt;/code&gt;）来高效地处理多个连接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异步网络应用&lt;/strong&gt;：例如，异步框架（如 Node.js、asyncio）中常常会使用非阻塞模式。这样，应用程序在等待 I/O 时可以执行其他任务，提高并发处理能力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实时数据传输系统&lt;/strong&gt;：如即时通讯软件、流媒体应用等，需要实时处理并发连接的请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Java 实现 WebSocket：
&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/fens/article/details/84634994?spm=1001.2101.3001.6650.3&amp;amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-3-84634994-blog-116306528.235%5Ev43%5Epc_blog_bottom_relevance_base9&amp;amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-3-84634994-blog-116306528.235%5Ev43%5Epc_blog_bottom_relevance_base9&amp;amp;utm_relevant_index=5&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java 现实 WebSocket-CSDN 博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;非阻塞模式的优点是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;高效&lt;/strong&gt;：可以同时处理多个连接，避免了线程或进程的创建和销毁带来的开销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更好的并发性&lt;/strong&gt;：能够高效地轮询大量连接，响应速度快。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;非阻塞模式的缺点是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;复杂的编程模型&lt;/strong&gt;：程序员需要显式地处理没有数据的情况，通常需要结合 I/O 多路复用技术，如 &lt;code&gt;select()&lt;/code&gt;、&lt;code&gt;poll()&lt;/code&gt; 或 &lt;code&gt;epoll()&lt;/code&gt;，这些技术有一定的学习曲线。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;需要额外的错误处理&lt;/strong&gt;：非阻塞操作返回时通常需要检查错误码并处理这种情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码示例（非阻塞模式）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import socket
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import errno
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 创建套接字
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 绑定端口
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server_socket.bind((&amp;#39;localhost&amp;#39;, 8080))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 设置监听
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server_socket.listen(5)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 设置为非阻塞模式
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server_socket.setblocking(False)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;print(&amp;#34;Server listening on port 8080...&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;while True:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    try:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        # 非阻塞等待客户端连接
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        client_socket, client_address = server_socket.accept()  # 非阻塞
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        print(&amp;#34;Accepted connection from&amp;#34;, client_address)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        # 接收数据
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        data = client_socket.recv(1024)  # 非阻塞
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        if data:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            print(&amp;#34;Received data:&amp;#34;, data)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            client_socket.sendall(b&amp;#34;Hello, Client&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        else:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            print(&amp;#34;No data received.&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        # 关闭连接
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        client_socket.close()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    except BlockingIOError:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        # 如果没有数据或者连接，则跳过
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        pass
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;选择使用 &lt;strong&gt;阻塞模式&lt;/strong&gt; 还是 &lt;strong&gt;非阻塞模式&lt;/strong&gt; 主要取决于应用程序的需求和并发性能的考虑：&lt;/p&gt;
&lt;h5 id=&#34;选择阻塞模式的情况&#34;&gt;&lt;strong&gt;选择阻塞模式的情况&lt;/strong&gt;：
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;简单应用程序&lt;/strong&gt;：如基本的客户端-服务器应用，或并发量较小的场景。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;单线程应用&lt;/strong&gt;：如果应用程序不需要同时处理多个连接，阻塞模式更简单且更易于实现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;没有高并发要求&lt;/strong&gt;：对于流量较低的应用，阻塞模式可以很好地满足需求，且开发复杂度较低。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;选择非阻塞模式的情况&#34;&gt;&lt;strong&gt;选择非阻塞模式的情况&lt;/strong&gt;：
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;高并发服务器&lt;/strong&gt;：如高流量网站、WebSocket 服务器、消息队列系统等，通常需要同时处理多个连接。非阻塞模式配合 &lt;strong&gt;I/O 多路复用&lt;/strong&gt;（如 &lt;code&gt;select()&lt;/code&gt;、&lt;code&gt;poll()&lt;/code&gt;、&lt;code&gt;epoll()&lt;/code&gt;）能够有效提升性能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异步应用程序&lt;/strong&gt;：例如异步框架（如 &lt;code&gt;asyncio&lt;/code&gt;、Node.js 等），这些程序需要在没有数据或事件时不阻塞，而是执行其他任务，从而提高响应能力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实时系统&lt;/strong&gt;：如游戏服务器、聊天系统，通常要求实时处理大量并发连接和事件，非阻塞模式能够避免因等待 I/O 而造成的延迟。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2025/01/18/oGkHeIyCUgxL7iM.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;20130624185912656.jpg&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2025/01/18/5yqGWQcunvpJMCI.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;20130624185927531.jpg&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;I/O 多路复用是指通过一个或少数几个线程/进程来同时管理多个 I/O 操作的技术。它使得程序能够同时监视多个 I/O 操作（如文件、套接字等）的状态，知道何时可以执行读取、写入等操作，避免阻塞，提升系统的并发性。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/Crocodile1006/article/details/140085411&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【Linux】IO 多路复用——select，poll，epoll 的概念和使用，三种模型的特点和优缺点，epoll 的工作模式_io 多路复用 select epoll-CSDN 博客&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;工作原理&#34;&gt;&lt;strong&gt;工作原理&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;I/O 多路复用的核心思想是 &lt;strong&gt;“等待多个 I/O 操作的事件，直到某个操作准备好，再去执行相关操作”&lt;/strong&gt;。通过 &lt;strong&gt;&lt;code&gt;select()&lt;/code&gt;&lt;/strong&gt;、&lt;strong&gt;&lt;code&gt;poll()&lt;/code&gt;&lt;/strong&gt; 和 &lt;strong&gt;&lt;code&gt;epoll()&lt;/code&gt;&lt;/strong&gt; 等系统调用，程序可以同时监视多个文件描述符（通常是套接字）的状态。&lt;/p&gt;
&lt;p&gt;当某个 I/O 操作就绪时（如有数据可读或可写），系统会通知应用程序。应用程序可以选择执行这些就绪操作，而不需要不断轮询检查各个套接字&lt;/p&gt;
&lt;p&gt;代码示例：&lt;code&gt;select()&lt;/code&gt; 模型：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import socket
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import select
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 创建监听套接字
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server_socket.bind((&amp;#39;localhost&amp;#39;, 8080))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server_socket.listen(5)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 设置非阻塞
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server_socket.setblocking(False)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 用来监视的文件描述符列表
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;inputs = [server_socket]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;outputs = []
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;while True:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    # 使用 select 来监听可读和可写的事件
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    readable, writable, exceptional = select.select(inputs, outputs, inputs)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    for s in readable:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        if s is server_socket:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            # 接受新的连接
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            client_socket, client_address = server_socket.accept()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            client_socket.setblocking(False)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            inputs.append(client_socket)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        else:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            # 处理客户端请求
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            data = s.recv(1024)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            if data:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                s.send(data)  # 发送回客户端
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            else:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                # 客户端关闭连接
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                inputs.remove(s)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                s.close()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;优缺点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：能够同时监控多个 I/O 操作，避免了每个连接都创建单独线程的开销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;对于大量文件描述符，&lt;code&gt;select()&lt;/code&gt; 和 &lt;code&gt;poll()&lt;/code&gt; 会遇到性能瓶颈（时间复杂度 O(n)）。&lt;/li&gt;
&lt;li&gt;需要手动管理事件和文件描述符集合，编程复杂度较高。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select()&lt;/code&gt; 有文件描述符数量限制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;异步 I/O 通过 &lt;strong&gt;回调机制&lt;/strong&gt;和 &lt;strong&gt;事件循环&lt;/strong&gt;，允许应用程序在等待 I/O 操作完成时进行其他任务，避免了阻塞。异步 I/O 不需要每次都轮询文件描述符，而是依赖操作系统或框架提供的事件驱动机制，在 I/O 操作完成时通知应用程序。&lt;/p&gt;
&lt;h4 id=&#34;工作原理-1&#34;&gt;&lt;strong&gt;工作原理&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/XMJYever/article/details/111560976&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;同步 I/O，异步 I/O 的理解_同步 io 和异步 io-CSDN 博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://cloud.tencent.com/developer/article/1684951&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;理解一下 5 种 IO 模型、阻塞 IO 和非阻塞 IO、同步 IO 和异步 IO-腾讯云开发者社区-腾讯云&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;异步 I/O 的核心是 &lt;strong&gt;“发起 I/O 操作，立即返回，不阻塞程序执行。操作完成时，通过回调通知程序进行后续处理”&lt;/strong&gt;。与 I/O 多路复用不同，异步 I/O 是通过一个 &lt;strong&gt;事件驱动&lt;/strong&gt;机制来管理多个并发操作，而不需要手动轮询文件描述符。&lt;/p&gt;
&lt;p&gt;在异步 I/O 模型下，操作系统或应用框架负责管理 I/O 操作的状态，当某个 I/O 操作完成时，会触发回调函数或事件通知机制，应用程序继续执行后续操作。&lt;/p&gt;
&lt;h4 id=&#34;常见的异步-io-实现&#34;&gt;&lt;strong&gt;常见的异步 I/O 实现&lt;/strong&gt;
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;基于事件驱动的异步 I/O&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;例如，Python 中的 &lt;strong&gt;&lt;code&gt;asyncio&lt;/code&gt;&lt;/strong&gt;，Node.js 等异步框架，都是通过事件循环和回调来处理并发操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作系统提供的异步 I/O 支持&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在一些操作系统中，提供了 &lt;strong&gt;异步 I/O&lt;/strong&gt; 系统调用。例如，Linux 提供了 &lt;code&gt;io_uring&lt;/code&gt;（一种高效的 I/O 操作机制）来实现内核级别的异步 I/O。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;代码示例：Python 异步 I/O（&lt;code&gt;asyncio&lt;/code&gt;）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import asyncio
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;async def handle_client(reader, writer):
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    data = await reader.read(100)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    message = data.decode()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    addr = writer.get_extra_info(&amp;#39;peername&amp;#39;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    print(f&amp;#34;Received {message} from {addr}&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    writer.write(data)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    await writer.drain()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    print(&amp;#34;Closing the connection&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    writer.close()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;async def main():
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    server = await asyncio.start_server(
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        handle_client, &amp;#39;localhost&amp;#39;, 8080)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    addr = server.sockets[0].getsockname()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    print(f&amp;#39;Serving on {addr}&amp;#39;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    async with server:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        await server.serve_forever()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;asyncio.run(main())
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;应用场景&#34;&gt;&lt;strong&gt;应用场景&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;异步 I/O 适用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;高并发 I/O 密集型应用&lt;/strong&gt;：如聊天系统、WebSocket 服务、实时数据流应用等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无阻塞应用&lt;/strong&gt;：如异步爬虫、实时数据处理系统。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事件驱动框架&lt;/strong&gt;：如 &lt;strong&gt;Node.js&lt;/strong&gt;（非阻塞 I/O）和 Python 的 &lt;code&gt;asyncio&lt;/code&gt; 框架&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;深度了解 I/O 多路复用和异步 I/O&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I/O 多路复用&lt;/strong&gt; 是一种技术，它允许程序在单个线程中同时监控多个 I/O 操作的状态，避免了每个连接都需要一个独立线程的问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;I/O 多路复用&lt;/strong&gt; 主要与 &lt;strong&gt;非阻塞模式&lt;/strong&gt; 配合使用。通过使用 &lt;code&gt;select()&lt;/code&gt;、&lt;code&gt;poll()&lt;/code&gt; 或 &lt;code&gt;epoll()&lt;/code&gt; 等系统调用，程序可以在等待多个套接字的 I/O 操作时，避免阻塞每个操作。当某个套接字可读或可写时，系统会通知应用程序，应用程序再去进行相应的操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;I/O 多路复用&lt;/strong&gt; 使用 &lt;strong&gt;非阻塞套接字&lt;/strong&gt;，因为它需要能够检查每个套接字的状态，而不希望阻塞程序执行。如果套接字当前没有数据，程序不会卡住，而是继续检查其他套接字或进行其他操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I/O 多路复用与非阻塞模式&lt;/strong&gt;：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在非阻塞模式下，I/O 多路复用技术（如 &lt;code&gt;select()&lt;/code&gt;、&lt;code&gt;epoll()&lt;/code&gt;）通常会检查多个套接字的状态，以确定哪些套接字准备好进行读写操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过 &lt;strong&gt;非阻塞模式 + I/O 多路复用&lt;/strong&gt;，程序能够高效地处理大量并发连接，在没有数据时不阻塞，避免了传统阻塞模式的性能瓶颈。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;异步 I/O&lt;/strong&gt;（Asynchronous I/O）和 &lt;strong&gt;非阻塞模式&lt;/strong&gt;是两种不同的概念，但它们常常一起使用，以提供更加高效的并发处理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;异步 I/O&lt;/strong&gt; 是一种编程模式，在这种模式下，应用程序发起 I/O 操作后，立即返回，程序可以继续执行其他任务，而不是等待 I/O 操作完成。当 I/O 操作完成时，系统会通过 &lt;strong&gt;回调函数&lt;/strong&gt; 或 &lt;strong&gt;事件通知机制&lt;/strong&gt; 来告知程序，从而处理已完成的 I/O 操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;非阻塞模式&lt;/strong&gt; 则是套接字的一种状态，表示当 I/O 操作不能立即完成时，它不会阻塞进程或线程。非阻塞模式通常需要与 I/O 多路复用或事件驱动机制结合使用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;异步 I/O 与非阻塞模式&lt;/strong&gt;：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;异步 I/O 不一定要求套接字是非阻塞的，但通常会与 &lt;strong&gt;非阻塞模式&lt;/strong&gt; 配合使用，因为非阻塞套接字可以让程序立即返回并继续执行其他任务，而不会被阻塞。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;异步 I/O 通过回调机制或事件通知来处理 I/O 操作完成的事件，而不是通过轮询套接字的状态。因此，异步 I/O 的设计思想比 I/O 多路复用更加高效，尤其在处理高并发任务时。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;异步 I/O 与阻塞模式的对比&lt;/strong&gt;：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;阻塞模式&lt;/strong&gt;：在阻塞模式下，程序会阻塞等待 I/O 操作完成，直到得到数据或连接，这可能导致效率低下。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;异步 I/O&lt;/strong&gt;：在异步 I/O 模式下，应用程序无需等待 I/O 操作完成，允许程序在 I/O 完成之前继续执行其他任务。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;异步 I/O 与非阻塞模式的对比&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;异步 IO 与非阻塞 IO 的区别在于，当用户线程发起一次 IO 操作不需要在此去确认内核是否准备好数据。异步 IO 中内核准备好数据后会将数据从内核空间自动拷贝到用户空间。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;I/O 多路复用&lt;/strong&gt;：程序通常会使用 &lt;strong&gt;非阻塞模式&lt;/strong&gt; 和 &lt;strong&gt;select() / poll() / epoll()&lt;/strong&gt; 来检测多个 I/O 操作是否准备好。当一个 I/O 操作准备好时，程序才会去执行该操作。
&lt;ul&gt;
&lt;li&gt;I/O 多路复用通过轮询技术实现。&lt;/li&gt;
&lt;li&gt;它是通过主动检查多个文件描述符的状态，来决定哪些 I/O 操作可以继续执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异步 I/O&lt;/strong&gt;：在异步 I/O 模型中，操作系统或应用框架负责管理 I/O 操作。当 I/O 操作完成时，操作系统或框架会通过事件回调或信号机制通知程序。程序无需轮询文件描述符的状态。
&lt;ul&gt;
&lt;li&gt;异步 I/O 是通过事件驱动和回调机制实现的，不需要轮询。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2025/01/18/BYDGgapWMEi8AP6.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;th1phcx2qx.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2025/01/18/1FwRn7kDmlJxgXI.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;2iv4y5otku.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;9-socket-的并发处理&#34;&gt;9. &lt;strong&gt;Socket 的并发处理&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/yi_chengyu/article/details/120467256&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;socket 网络编程——多进程、多线程处理并发_socket 客户端多线程并发-CSDN 博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为了处理多个客户端同时连接并且进行数据交换，服务器需要处理并发连接。常见的并发处理方法有：&lt;/p&gt;
&lt;h4 id=&#34;91-多进程multiprocessing&#34;&gt;9.1 &lt;strong&gt;多进程（Multiprocessing）&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;每当有新的客户端连接时，服务器会派发一个子进程来处理该连接。&lt;/li&gt;
&lt;li&gt;优点：各个进程之间相互独立，互不干扰。&lt;/li&gt;
&lt;li&gt;缺点：进程创建和销毁的开销较大，特别是在高并发情况下效率低下。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;92-多线程multithreading&#34;&gt;9.2 &lt;strong&gt;多线程（Multithreading）&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;服务器通过创建多个线程来处理并发连接。每个线程处理一个连接。&lt;/li&gt;
&lt;li&gt;优点：线程之间的通信相对简单，系统开销较小。&lt;/li&gt;
&lt;li&gt;缺点：线程间共享内存和资源，需要加锁机制，可能导致线程安全问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;93-事件驱动event-driven&#34;&gt;9.3 &lt;strong&gt;事件驱动（Event-driven）&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;通过事件循环来处理并发请求，例如使用 &lt;strong&gt;&lt;code&gt;select()&lt;/code&gt;&lt;/strong&gt;、&lt;strong&gt;&lt;code&gt;poll()&lt;/code&gt;&lt;/strong&gt; 或 &lt;strong&gt;&lt;code&gt;epoll()&lt;/code&gt;&lt;/strong&gt; 等机制。&lt;/li&gt;
&lt;li&gt;适用于高并发、低延迟的应用，如 Web 服务器、即时通讯软件。&lt;/li&gt;
&lt;li&gt;优点：资源占用小，不需要为每个连接创建新线程或进程。&lt;/li&gt;
&lt;li&gt;缺点：编程模型较复杂，需要理解事件循环和非阻塞 I/O。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;94-基于协程coroutine&#34;&gt;9.4 &lt;strong&gt;基于协程（Coroutine）&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;通过协程来处理并发任务。协程是轻量级的线程，可以在单个线程内并发执行多个任务，避免了传统线程的创建开销。&lt;/li&gt;
&lt;li&gt;Python 中的 &lt;strong&gt;&lt;code&gt;asyncio&lt;/code&gt;&lt;/strong&gt; 就是基于协程的并发框架。&lt;/li&gt;
&lt;li&gt;优点：高效、灵活，适用于 I/O 密集型任务。&lt;/li&gt;
&lt;li&gt;缺点：与传统的多进程、多线程相比，调试和错误追踪更为复杂。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
