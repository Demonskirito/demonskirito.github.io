[{"content":"下载 Dbeaver 确认你的系统架构 1 uname -m 1 2 mikey@mikey-virtual-machine:~/桌面/dbeaver$ uname -m x86_64 因为下成了 aarch 又得重下一个下 x86_64\n下载链接： dbeaver/dbeaver: Free universal database tool and SQL client\n因为最新版本的 Dbeaver 需要 Java17 的支持所以需要我们手动更新一下 Java 的环境\n1 2 mikey@mikey-virtual-machine:~/桌面/dbeaver$ ./dbeaver Gtk-Message: GtkDialog mapped without a transient parent. This is discouraged. 使用 sdkman 安装 Java 17 安装 SDKMAN：\n首先安装 SDKMAN\n1 2 curl -s \u0026#34;https://get.sdkman.io\u0026#34; | bash source \u0026#34;$HOME/.sdkman/bin/sdkman-init.sh\u0026#34; 安装 Java 17：\n使用 SDKMAN 安装 Java 17\n1 sdk install java 17-open 验证安装：\n安装完成后，使用以下命令验证 Java 版本\n1 java -version 确认正确的 Java 路径\n1 which java 1 mikey@mikey-virtual-machine:~/桌面/dbeaver$ which java /home/mikey/.sdkman/candidates/java/current/bin/java 打开 dbeaver.ini 文件，通常它位于 DBeaver 安装目录下：\n1 nano /home/mikey/桌面/dbeaver/dbeaver.ini 修改或添加 -vm 参数，确保它指向正确的 Java 路径。在 -vm 行上指定 /usr/lib/jvm/java-17-openjdk-amd64/bin/java（如果你安装了 OpenJDK 17）\n1 -vm /home/mikey/.sdkman/candidates/java/current/bin/java 保存并退出\n保存文件并退出编辑器（按 Ctrl+O 保存，按 Ctrl+X 退出）。\n赋予执行权限（如果没有）\n1 chmod +x ~/桌面/dbeaver/dbeaver 启动 DBeaver\n然后再次尝试启动 DBeaver：\n1 ./dbeaver 检查 ip 端口 1 2 3 4 5 6 7 8 9 10 11 12 13 mikey@mikey-virtual-machine:~$ ip addr 1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: ens33: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc pfifo_fast state UNKNOWN group default qlen 1000 link/ether 00:0c:29:c8:45:fa brd ff:ff:ff:ff:ff:ff inet 192.168.245.128/24 brd 192.168.245.255 scope global dynamic ens33 valid_lft 1196sec preferred_lft 1196sec inet6 fe80::c31c:ab68:2f03:7936/64 scope link valid_lft forever preferred_lft forever 执行以下命令检查 MySQL 是否开始在 IPv4 地址上监听\n1 2 mikey@mikey-virtual-machine:~$ netstat -tuln | grep 3306 tcp 0 0 0.0.0.0:3306 0.0.0.0:* LISTEN 3306 默认端口测试\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 mikey@mikey-virtual-machine:~$ mysql -u root -p Enter password: Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 4 Server version: 5.7.33-0ubuntu0.16.04.1 (Ubuntu) Copyright (c) 2000, 2021, Oracle and/or its affiliates. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type \u0026#39;help;\u0026#39; or \u0026#39;\\h\u0026#39; for help. Type \u0026#39;\\c\u0026#39; to clear the current input statement. mysql\u0026gt; CREATE DATABASE test; Query OK, 1 row affected (0.00 sec) mysql\u0026gt; USE test; Database changed mysql\u0026gt; CREATE TABLE user ( -\u0026gt; id INT AUTO_INCREMENT PRIMARY KEY, -\u0026gt; name VARCHAR(100) NOT NULL, -\u0026gt; email VARCHAR(100) NOT NULL UNIQUE -\u0026gt; ); Query OK, 0 rows affected (0.03 sec) mysql\u0026gt; INSERT INTO user (name, email) VALUES (\u0026#39;Alice\u0026#39;, \u0026#39;alice@example.com\u0026#39;); Query OK, 1 row affected (0.01 sec) mysql\u0026gt; INSERT INTO user (name, email) VALUES (\u0026#39;Bob\u0026#39;, \u0026#39;bob@example.com\u0026#39;); Query OK, 1 row affected (0.00 sec) mysql\u0026gt; SELECT * FROM user; +----+-------+-------------------+ | id | name | email | +----+-------+-------------------+ | 1 | Alice | alice@example.com | | 2 | Bob | bob@example.com | +----+-------+-------------------+ 2 rows in set (0.00 sec) mysql\u0026gt; SHOW VARIABLES LIKE \u0026#39;port\u0026#39;; +---------------+-------+ | Variable_name | Value | +---------------+-------+ | port | 3306 | +---------------+-------+ 1 row in set (0.02 sec) mysql\u0026gt; GRANT ALL PRIVILEGES ON *.* TO \u0026#39;root\u0026#39;@\u0026#39;%\u0026#39; IDENTIFIED BY \u0026#39;050101\u0026#39;; ERROR 2006 (HY000): MySQL server has gone away No connection. Trying to reconnect... Connection id: 6 Current database: test ERROR 1819 (HY000): Your password does not satisfy the current policy requirements mysql\u0026gt; FLUSH PRIVILEGES; Query OK, 0 rows affected (0.00 sec) mysql\u0026gt; 解决 1130 - Host \u0026lsquo;192.168.245.1\u0026rsquo; is not allowed to connect to this MariaDB server（完美解决）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 mikey@mikey-virtual-machine:~$ mysql -u root -p Enter password: Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 16 Server version: 5.7.33-0ubuntu0.16.04.1 (Ubuntu) Copyright (c) 2000, 2021, Oracle and/or its affiliates. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type \u0026#39;help;\u0026#39; or \u0026#39;\\h\u0026#39; for help. Type \u0026#39;\\c\u0026#39; to clear the current input statement. mysql\u0026gt; use mysql; Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed mysql\u0026gt; select host from user where user=\u0026#39;root\u0026#39;; +-----------+ | host | +-----------+ | localhost | +-----------+ 1 row in set (0.00 sec) mysql\u0026gt; update user set host = \u0026#39;%\u0026#39; where user =\u0026#39;root\u0026#39;; Query OK, 1 row affected (0.00 sec) Rows matched: 1 Changed: 1 Warnings: 0 mysql\u0026gt; flush privileges; Query OK, 0 rows affected (0.00 sec) mysql\u0026gt; 启动 xampp\n1 2 cd /opt/lampp sudo ./manager-linux.run (or manager-linux-x64.run) linux 下进入 xampp 中 mysql_linux 系统里已经有 mysql,如何同时运行 lampp-CSDN 博客\n报错是因为 xampp 中的命令工具在/opt/lampp/bin/目录中，所以可以这样运行 mysql 命令：\n1 /opt/lampp/bin/mysql -uroot -p 下载 XAMPP https://sourceforge.net/projects/xampp/\n如果装过 MySQL 服务，那么我们需要去改一下端口使得 opt 中的 MySQL 服务正常运行，并改一下 my.conf 的 port，例如我的为 3307\n远程连接 MariaDB 报错——1130 - Host \u0026lsquo;192.168.64.1\u0026rsquo; is not allowed to connect to this MariaDB server_mariadb host % 无效-CSDN 博客\n远程连接报错的解决方式，虽然我上面写了，但还是把文档列出来给大家参考下。\n成功完成远程连接如下\n第一个是我原本的 mysql 服务，已经嵌入虚拟机的环境变量中了，第二个是 xampp 的 mysql 服务，需要进入 opt 文件夹中打开 mysql 服务，默认是没有密码的。\n不懂建议将上一节的文章再看一遍，写的稍微乱序了。\n检查 windows 端的所有端口的方式是：\n1 ipconfig dvwa+linux+xampp 因为在上一节内容中我们已经下载好 xampp 且 mysql 已经可以被本机 windows 访问，所以现在紧接着下载 dvwa 靶场并部署。\n安装 DVWA\n下载 DVWA： 从 GitHub 上克隆 DVWA\n1 2 cd /opt/lampp/htdocs sudo git clone https://github.com/ethicalhack3r/DVWA.git 为 DVWA 目录设置适当的权限\n1 sudo chown -R www-data:www-data /opt/lampp/htdocs/DVWA 配置 MySQL 数据库\n启动 MySQL\n1 sudo /opt/lampp/lampp startmysql 因为配置外部 windows 连接的时候我们对权限进行了更改，将 root@localhost 改成了 root@%，才能通过外部连接数据库，但这种方式会造成我们在 linux 系统的 cmd 中和 phpmyadmin 中没有了 root 相关的权限，连数据库也只能看到 information_schema,所以需要我们通过外部已有权限的 windows 的 mysql 服务去再添加回我们的权限，问 chatgpt 等于没用\u0026hellip;..\n无论是增加数据库还是查询权限我们都只能得到以下内容\n1 2 MariaDB [(none)]\u0026gt; SHOW GRANTS FOR \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39;; ERROR 1044 (42000): Access denied for user \u0026#39;\u0026#39;@\u0026#39;localhost\u0026#39; to database \u0026#39;mysql\u0026#39; 因为失误次数太多，导致关闭了之前的 cmd，这里我们就随便看一下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 mikey@mikey-virtual-machine:~$ /opt/lampp/bin/mysql -uroot -p Enter password: Welcome to the MariaDB monitor. Commands end with ; or \\g. Your MariaDB connection id is 13 Server version: 10.4.32-MariaDB Source distribution Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others. Type \u0026#39;help;\u0026#39; or \u0026#39;\\h\u0026#39; for help. Type \u0026#39;\\c\u0026#39; to clear the current input statement. MariaDB [(none)]\u0026gt; use mysql Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed MariaDB [mysql]\u0026gt; update user set host = \u0026#39;%\u0026#39; where user =\u0026#39;root\u0026#39;; ERROR 1062 (23000): Duplicate entry \u0026#39;%-root\u0026#39; for key \u0026#39;PRIMARY\u0026#39; MariaDB [mysql]\u0026gt; select host from user where user=\u0026#39;root\u0026#39; -\u0026gt; ; +-----------+ | host | +-----------+ | % | | 127.0.0.1 | | ::1 | +-----------+ 3 rows in set (0.001 sec) MariaDB [mysql]\u0026gt; update user set host = \u0026#39;%\u0026#39; where user =\u0026#39;root\u0026#39;; ERROR 1062 (23000): Duplicate entry \u0026#39;%-root\u0026#39; for key \u0026#39;PRIMARY\u0026#39; MariaDB [mysql]\u0026gt; flush privileges; Query OK, 0 rows affected (0.001 sec) MariaDB [mysql]\u0026gt; SHOW DATABASES; ERROR 2006 (HY000): MySQL server has gone away No connection. Trying to reconnect... ERROR 1044 (42000): Access denied for user \u0026#39;\u0026#39;@\u0026#39;localhost\u0026#39; to database \u0026#39;mysql\u0026#39; ERROR: Can\u0026#39;t connect to the server unknown [mysql]\u0026gt; exit Bye mikey@mikey-virtual-machine:~$ sudo /opt/lampp/bin/mysql -u root -p [sudo] mikey 的密码： 对不起，请重试。 [sudo] mikey 的密码： Enter password: Welcome to the MariaDB monitor. Commands end with ; or \\g. Your MariaDB connection id is 151 Server version: 10.4.32-MariaDB Source distribution Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others. Type \u0026#39;help;\u0026#39; or \u0026#39;\\h\u0026#39; for help. Type \u0026#39;\\c\u0026#39; to clear the current input statement. MariaDB [(none)]\u0026gt; SHOW DATABASES; +--------------------+ | Database | +--------------------+ | information_schema | +--------------------+ 1 row in set (0.000 sec) MariaDB [(none)]\u0026gt; SHOW GRANTS FOR \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39;; ERROR 1044 (42000): Access denied for user \u0026#39;\u0026#39;@\u0026#39;localhost\u0026#39; to database \u0026#39;mysql\u0026#39; MariaDB [(none)]\u0026gt; exit Bye mikey@mikey-virtual-machine:~$ sudo /opt/lampp/bin/mysqld --skip-grant-tables \u0026amp; [1] 70217 mikey@mikey-virtual-machine:~$ sudo: /opt/lampp/bin/mysqld：找不到命令 [1]+ 退出 1 sudo /opt/lampp/bin/mysqld --skip-grant-tables mikey@mikey-virtual-machine:~$ sudo /opt/lampp/bin/mysql -u root Welcome to the MariaDB monitor. Commands end with ; or \\g. Your MariaDB connection id is 168 Server version: 10.4.32-MariaDB Source distribution Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others. Type \u0026#39;help;\u0026#39; or \u0026#39;\\h\u0026#39; for help. Type \u0026#39;\\c\u0026#39; to clear the current input statement. MariaDB [(none)]\u0026gt; FLUSH PRIVILEGES; ERROR 1227 (42000): Access denied; you need (at least one of) the RELOAD privilege(s) for this operation MariaDB [(none)]\u0026gt; use mysql ERROR 1044 (42000): Access denied for user \u0026#39;\u0026#39;@\u0026#39;localhost\u0026#39; to database \u0026#39;mysql\u0026#39; MariaDB [(none)]\u0026gt; user mysql -\u0026gt; -\u0026gt; ; ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near \u0026#39;user mysql\u0026#39; at line 1 MariaDB [(none)]\u0026gt; FLUSH PRIVILEGES; ERROR 1227 (42000): Access denied; you need (at least one of) the RELOAD privilege(s) for this operation MariaDB [(none)]\u0026gt; 以上是我 linux 中尝试的结果，在数据库中 root@localhost 和root@127.0.0.1是不一样的，后面我们就能发现\n这是我后面根据外部 windows 访问远程数据库添加后的表格，红框为添加部分\n添加完我们的权限表格后要运行以下代码并有相应的返回\n1 2 3 4 5 6 7 FLUSH PRIVILEGES; SHOW GRANTS FOR \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39;; 返回： SHOW GRANTS FOR \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39; \u0026gt; OK \u0026gt; 查询时间: 0s 这是外部访问使用上述方法的一个大弊端\u0026hellip;..给我坑到了\n欧克，既然已经解决数据库的问题，我们继续配置 dvwa\n编辑配置文件，一定要去看一下你/opt/lampp/htdocs/DVWA/config 目录下的文件 config.inc.php.dist，会有收获的 之后改一下这个目录下的 php 配置类文件\n1 sudo nano /opt/lampp/htdocs/DVWA/config/config.inc.php ctrl+o 保存 ctrl+x 退出 以下是我的配置类文件的具体信息\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 \u0026lt;?php # If you are having problems connecting to the MySQL database and all of the variables below are correct # try changing the \u0026#39;db_server\u0026#39; variable from localhost to 127.0.0.1. Fixes a problem due to sockets. # Thanks to @digininja for the fix. # Database management system to use $DBMS = getenv(\u0026#39;DBMS\u0026#39;) ?: \u0026#39;MySQL\u0026#39;; // 如果使用其他 DBMS，可以更改 # Database variables # WARNING: The database specified under db_database WILL BE ENTIRELY DELETED during setup. # Please use a database dedicated to DVWA. # # If you are using MariaDB then you cannot use root, you must create a dedicated DVWA user. # See README.md for more information on this. $_DVWA = array(); $_DVWA[ \u0026#39;db_server\u0026#39; ] = getenv(\u0026#39;DB_SERVER\u0026#39;) ?: \u0026#39;127.0.0.1\u0026#39;; // 改为 127.0.0.1 避免通过 socket 连接问题 $_DVWA[ \u0026#39;db_database\u0026#39; ] = getenv(\u0026#39;DB_DATABASE\u0026#39;) ?: \u0026#39;dvwa\u0026#39;; // 使用你创建的数据库 $_DVWA[ \u0026#39;db_user\u0026#39; ] = getenv(\u0026#39;DB_USER\u0026#39;) ?: \u0026#39;root\u0026#39;; // 数据库用户名（如果使用 root） $_DVWA[ \u0026#39;db_password\u0026#39; ] = getenv(\u0026#39;DB_PASSWORD\u0026#39;) ?: \u0026#39;\u0026#39;; // 数据库密码（如果没有密码，保持为空） $_DVWA[ \u0026#39;db_port\u0026#39;] = getenv(\u0026#39;DB_PORT\u0026#39;) ?: \u0026#39;3307\u0026#39;; // MySQL 的端口号，3307 # ReCAPTCHA settings # Used for the \u0026#39;Insecure CAPTCHA\u0026#39; module # You\u0026#39;ll need to generate your own keys at: https://www.google.com/recaptcha/admin $_DVWA[ \u0026#39;recaptcha_public_key\u0026#39; ] = getenv(\u0026#39;RECAPTCHA_PUBLIC_KEY\u0026#39;) ?: \u0026#39;\u0026#39;; $_DVWA[ \u0026#39;recaptcha_private_key\u0026#39; ] = getenv(\u0026#39;RECAPTCHA_PRIVATE_KEY\u0026#39;) ?: \u0026#39;\u0026#39;; # Default security level # Default value for the security level with each session. # The default is \u0026#39;impossible\u0026#39;. You may wish to set this to either \u0026#39;low\u0026#39;, \u0026#39;medium\u0026#39;, \u0026#39;high\u0026#39; or \u0026#39;impossible\u0026#39;. $_DVWA[ \u0026#39;default_security_level\u0026#39; ] = getenv(\u0026#39;DEFAULT_SECURITY_LEVEL\u0026#39;) ?: \u0026#39;impossible\u0026#39;; # Default locale # Default locale for the help page shown with each session. # The default is \u0026#39;en\u0026#39;. You may wish to set this to either \u0026#39;en\u0026#39; or \u0026#39;zh\u0026#39;. $_DVWA[ \u0026#39;default_locale\u0026#39; ] = getenv(\u0026#39;DEFAULT_LOCALE\u0026#39;) ?: \u0026#39;en\u0026#39;; # Disable authentication # Some tools don\u0026#39;t like working with authentication and passing cookies around # so this setting lets you turn off authentication. $_DVWA[ \u0026#39;disable_authentication\u0026#39; ] = getenv(\u0026#39;DISABLE_AUTHENTICATION\u0026#39;) ?: false; define (\u0026#39;MYSQL\u0026#39;, \u0026#39;mysql\u0026#39;); define (\u0026#39;SQLITE\u0026#39;, \u0026#39;sqlite\u0026#39;); # SQLi DB Backend # Use this to switch the backend database used in the SQLi and Blind SQLi labs. # This does not affect the backend for any other services, just these two labs. # If you do not understand what this means, do not change it. $_DVWA[\u0026#39;SQLI_DB\u0026#39;] = getenv(\u0026#39;SQLI_DB\u0026#39;) ?: MYSQL; #$_DVWA[\u0026#39;SQLI_DB\u0026#39;] = SQLITE; #$_DVWA[\u0026#39;SQLITE_DB\u0026#39;] = \u0026#39;sqli.db\u0026#39;; ?\u0026gt; 在配置前我还下了点 readme 中的文件\n1 2 sudo apt update sudo apt install -y apache2 mariadb-server mariadb-client php php-mysqli php-gd libapache2-mod-php 在浏览器中访问 http://localhost/DVWA/。 在登录页面中，输入： 用户名: admin 密码: password 进去后如下所示 更改内容\n1 mikey@mikey-virtual-machine:/etc/php/7.0/apache2$ sudo nano php.ini 如果是 xampp 是不一样的\n1 sudo nano /opt/lampp/etc/php.ini ctrl+w 查找\n1 allow_url_include 改成以下内容\n1 allow_url_include = On 推荐大家可以看一下视频，虽然是洋文但是看电脑还是简单易懂的 https://www.youtube.com/watch?v=WkyDxNJkgQ4\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 mikey@mikey-virtual-machine:~$ sudo nano /opt/lampp/etc/php.ini [sudo] mikey 的密码： mikey@mikey-virtual-machine:~$ ps aux | grep apache2 mikey 95778 0.0 0.0 15984 944 pts/2 S+ 20:54 0:00 grep --color=auto apache2 mikey@mikey-virtual-machine:~$ ps aux | grep httpd root 94161 0.0 1.4 368132 27816 ? Ss 20:34 0:00 /opt/lampp/bin/httpd -k start -E /opt/lampp/logs/error_log -DSSL -DPHP daemon 94164 0.0 0.4 362284 7920 ? S 20:34 0:00 /opt/lampp/bin/httpd -k start -E /opt/lampp/logs/error_log -DSSL -DPHP daemon 94165 0.0 0.8 368264 16692 ? S 20:34 0:00 /opt/lampp/bin/httpd -k start -E /opt/lampp/logs/error_log -DSSL -DPHP daemon 94166 0.0 0.6 368264 13136 ? S 20:34 0:00 /opt/lampp/bin/httpd -k start -E /opt/lampp/logs/error_log -DSSL -DPHP daemon 94167 0.0 0.6 368264 11856 ? S 20:34 0:00 /opt/lampp/bin/httpd -k start -E /opt/lampp/logs/error_log -DSSL -DPHP daemon 94168 0.0 0.6 368264 11856 ? S 20:34 0:00 /opt/lampp/bin/httpd -k start -E /opt/lampp/logs/error_log -DSSL -DPHP daemon 94169 0.0 0.6 368264 11856 ? S 20:34 0:00 /opt/lampp/bin/httpd -k start -E /opt/lampp/logs/error_log -DSSL -DPHP daemon 94190 0.0 1.3 374664 25984 ? S 20:35 0:00 /opt/lampp/bin/httpd -k start -E /opt/lampp/logs/error_log -DSSL -DPHP daemon 94191 0.0 1.5 378904 29852 ? S 20:35 0:00 /opt/lampp/bin/httpd -k start -E /opt/lampp/logs/error_log -DSSL -DPHP daemon 94192 0.0 0.6 368264 11856 ? S 20:35 0:00 /opt/lampp/bin/httpd -k start -E /opt/lampp/logs/error_log -DSSL -DPHP mikey 95808 0.0 0.0 15984 928 pts/2 S+ 20:55 0:00 grep --color=auto httpd mikey@mikey-virtual-machine:~$ id www-data uid=33(www-data) gid=33(www-data) 组=33(www-data) mikey@mikey-virtual-machine:~$ ls -ld /opt/lampp/htdocs/DVWA/hackable/uploads drwxr-xr-x 2 nobody nogroup 4096 1月 6 17:58 /opt/lampp/htdocs/DVWA/hackable/uploads mikey@mikey-virtual-machine:~$ sudo chown -R www-data:www-data /opt/lampp/htdocs/DVWA/hackable/uploads/ 一些疑问 为什么官方人员将 daemon 设置成 www-data\n1. 安全性 www-data 用户通常具有更严格的访问权限，通常仅限于运行 Web 服务器进程所必需的权限。例如，它不应该拥有对整个系统文件的访问权限，而仅有对 Web 相关文件和目录的访问权限。 使用 www-data 可以更好地控制 Web 服务的权限，确保即使 Web 服务器受到攻击，也能限制攻击者能执行的操作。 2. 兼容性 很多 Web 应用程序（例如 WordPress、Drupal、Joomla 等）和 CMS 系统都假设 Web 服务器进程是由 www-data 用户运行的。许多应用程序的安装和配置文档中都提到，Web 服务器需要设置为 www-data 用户，以便正确处理文件上传、权限设置以及文件写入。 使用统一的默认用户（如 www-data）可以减少配置复杂度，使得开发者和管理员更容易在不同的 Linux 系统上迁移或部署应用。 3. 分离不同进程的职责 在 Linux 系统中，daemon 用户通常用于运行非交互式后台进程，不一定与 Web 服务器相关。为了保持进程的职责分离，将 Web 服务器进程与其他后台进程（如守护进程）区分开来是一个良好的实践。 www-data 用户专门用于 Web 服务器进程，确保只有 Web 服务器相关的进程使用该用户，避免与其他系统进程产生冲突。 4. 权限管理 www-data 是 Linux 系统上运行 Web 服务的标准用户之一，许多 Linux 发行版（例如 Debian、Ubuntu 等）都使用这个用户。它通常有权限访问 Web 服务器目录和文件，但没有系统级别的管理权限，因此可以将其权限控制得非常细致。 使用 www-data 可以确保 Web 服务与其他系统服务隔离，并且可以灵活地为 Web 服务文件夹设置合适的访问权限（例如 www-data 作为所有者，其他用户具有适当的读取和写入权限）。 5. 简化用户和组管理 大多数 Linux 发行版在安装 Apache 或 Nginx 时会自动创建 www-data 用户和组，并设置默认的文件和目录权限。这样可以简化 Web 服务的配置，减少人为配置错误的风险。 将 www-data 作为 Web 服务器用户不仅是为了安全性，还为了更好的兼容性和管理。虽然 daemon 用户也可以用于 Web 服务，但现代的 Linux 发行版和 Web 应用程序更倾向于使用 www-data，并且许多 Web 应用和框架的安装指南假设 Web 服务器是以 www-data 用户运行的\n继续配置\n修改文件夹的所有者\n首先，您需要使用 chown 命令来修改文件夹的所有者和所属组。假设 uploads 文件夹位于 /opt/lampp/htdocs/DVWA/ 目录下，并且您希望将所有者和所属组更改为 www-data，可以使用以下命令\n1 sudo chown -R www-data:www-data /opt/lampp/htdocs/DVWA/hackable/uploads/ -R 表示递归地修改该目录及其所有子目录和文件的所有者和组。\nwww-data:www-data 指定将文件的所有者和组都设置为 www-data。\n修改文件夹的权限\n为了确保 Web 服务器可以读取和写入该文件夹，您需要设置合适的权限。通常，为了让 Web 服务器能够写入文件夹，您可以使用以下命令：\n1 sudo chmod -R 777 /opt/lampp/htdocs/DVWA/hackable/uploads/ 确认修改\n完成上述命令后，您可以通过以下命令确认文件夹的所有者和权限：\n1 2 3 4 ls -l /opt/lampp/htdocs/DVWA/hackable/uploads/ 输出： drwxr-xr-x 2 www-data www-data 4096 Jan 6 20:00 uploads 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 mikey@mikey-virtual-machine:~$ sudo chown -R www-data:www-data /opt/lampp/htdocs/DVWA/hackable/uploads [sudo] mikey 的密码： mikey@mikey-virtual-machine:~$ sudo chmod -R 777 /opt/lampp/htdocs/DVWA/hackable/uploads mikey@mikey-virtual-machine:~$ ls -l /opt/lampp/htdocs/DVWA/hackable/uploads/ 总用量 4 -rwxrwxrwx 1 www-data www-data 667 1月 6 17:58 dvwa_email.png mikey@mikey-virtual-machine:~$ sudo /opt/lampp/lampp restart Restarting XAMPP for Linux 8.2.12-0... XAMPP: Stopping Apache...ok. XAMPP: Stopping MySQL...ok. XAMPP: Stopping ProFTPD...ok. XAMPP: Starting Apache...ok. XAMPP: Starting MySQL...ok. XAMPP: Starting ProFTPD...ok. mikey@mikey-virtual-machine:~$ 权限之间的区别 777 和 755 1. 755 和 777 权限的区别 755： 所有者（Owner）：读、写、执行（rwx）。 同组用户（Group）：读、执行（r-x）。 其他用户（Others）：读、执行（r-x）。 总结：755 权限给文件夹的所有者（例如，www-data）读、写和执行的权限，但其他用户只能读取和执行，不能修改文件。适合大多数 Web 服务器的文件夹权限设置，确保只有授权的用户（如 www-data）可以写入文件夹，其他用户只能读取或执行文件夹中的内容。 777： 所有者（Owner）：读、写、执行（rwx）。 同组用户（Group）：读、写、执行（rwx）。 其他用户（Others）：读、写、执行（rwx）。 总结：777 权限意味着所有人（所有者、组用户、其他用户）都可以读取、写入和执行该文件夹中的内容。这种设置为最宽松的权限配置，可能存在安全风险，因为它允许任何用户都能修改文件夹中的内容，包括可能未授权的用户。 2. 为什么官方使用 777 权限 官方通常在开发环境或者特定的应用场景下使用 777 权限，原因包括：\n简化开发：在开发阶段，特别是当文件上传操作频繁时，使用 777 权限可以简化调试过程，因为它避免了权限问题。 避免权限错误：在某些 Web 服务器配置中，尤其是当 Web 服务器与应用程序运行在不同用户下时，777 权限可以避免权限不足的问题。 然而，777 权限非常不安全，因为它让任何用户（包括恶意用户）都能修改、删除和上传文件，从而增加了被攻击的风险。\n3. 为什么建议使用 755 或 775 尽管 777 权限在某些情况下能解决问题，但它会带来严重的安全隐患。在生产环境中，推荐使用 755 或 775 权限，理由如下：\n安全性：755 权限保证只有文件夹的所有者（通常是 Web 服务器的用户，例如 www-data）可以写入，而其他用户只能读取和执行。这可以有效降低未经授权的访问或恶意修改文件的风险。 最小权限原则：设置为 755 或 775 遵循最小权限原则，即只授予必要的权限，减少了潜在的攻击面。775 适用于 Web 服务器的用户和组需要写入文件夹的情况。 例如： www-data 用户需要读、写、执行权限，而其他用户只需要读取文件夹内容。 如果你使用 775，则其他同组用户也可以写入文件夹（例如 Web 开发团队的成员）。 4. 总结：何时使用 755 或 777 开发环境：在开发环境中，如果不想受到权限问题的困扰，可以暂时使用 777 权限。但要意识到这带来了安全风险。 生产环境：在生产环境中，应该避免使用 777，而应使用 755 或 775。使用 775 时，可以确保 Web 服务器（如 Apache 或 Nginx）能够读取和写入，而其他用户则没有写权限。 5. 建议 生产环境：使用 755 或 775 权限。 开发环境：如果必须使用 777，在完成开发和调试后应该及时回到更安全的权限设置。 定期检查权限：确保只有需要的用户和组有适当的访问权限，以降低安全风险。 问题： /opt/lampp/htdocs/DVWA/config ==No==\n1 2 3 4 ls -ld /opt/lampp/htdocs/DVWA/config 输出以下内容： drwxr-xr-x 2 www-data nogroup 4096 Jan 6 19:57 /opt/lampp/htdocs/DVWA/config 1 sudo chmod -R 777 /opt/lampp/htdocs/DVWA/config 1 sudo chown -R www-data:www-data /opt/lampp/htdocs/DVWA/config 1 2 3 4 ls -ld /opt/lampp/htdocs/DVWA/config 输出以下内容： drwxrwxr-x 2 www-data www-data 4096 Jan 6 19:57 /opt/lampp/htdocs/DVWA/config 1 sudo /opt/lampp/lampp restart 成功后的页面应该如下所示：\n","date":"2025-01-13T20:26:21+08:00","permalink":"https://demonskirito.github.io/p/dbeaver-xampp-ubuntu/","title":"Dbeaver+Xampp+Ubuntu"},{"content":"参考文献 Sa-Token 实现分布式登录鉴权（Redis 集成 前后端分离）-腾讯云开发者社区-腾讯云\n介绍 StpInterface 是 Sa-Token 框架中的一个接口，属于 Sa-Token 身份认证与授权框架的一部分。该接口提供了一些方法来实现自定义的身份认证和授权管理功能，特别是针对自定义的权限验证。\nStpInterface 类的主要功能 StpInterface 用于定义 Sa-Token 中与用户身份相关的核心操作接口。通过实现这个接口，用户可以自定义如何获取用户信息、验证用户身份、判断是否有权限等。\n主要方法 StpInterface 主要包括以下几个常用的方法：\ngetLoginId()：获取当前登录用户的唯一标识（例如用户 ID）。\nString getLoginId();\nisLogin()：判断当前是否已登录。\nboolean isLogin();\nlogin(Object loginId)：登录方法，传入一个唯一标识来进行用户登录。\nvoid login(Object loginId);\nlogout()：登出方法，清除用户的登录状态。\nvoid logout();\nhasPermission(String permission)：判断当前登录用户是否具有某个权限。\nboolean hasPermission(String permission);\nhasRole(String role)：判断当前登录用户是否拥有某个角色。\nboolean hasRole(String role);\n使用场景 自定义身份认证：如果需要自定义登录逻辑或用户身份验证，可以实现 StpInterface 接口来替代 Sa-Token 默认的用户认证方式。 角色与权限管理：通过 hasRole 和 hasPermission 等方法，进行角色与权限的验证，保证应用中的授权机制符合业务需求。 示例 以下是一个简单的实现例子，展示了如何实现 StpInterface 接口来定制认证与授权逻辑：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 import cn.dev33.satoken.stp.StpInterface; import org.springframework.stereotype.Component; @Component public class MyStpInterface implements StpInterface { @Override public String getLoginId() { // 返回当前登录用户的ID return \u0026#34;123\u0026#34;; // 假设返回用户ID为123 } @Override public boolean isLogin() { // 判断当前用户是否登录 return true; // 假设用户已登录 } @Override public void login(Object loginId) { // 实现用户登录逻辑 // 这里可以根据传入的loginId来设置用户的登录状态 } @Override public void logout() { // 实现登出逻辑 // 清除用户的登录状态 } @Override public boolean hasPermission(String permission) { // 判断用户是否有某个权限 return \u0026#34;admin\u0026#34;.equals(permission); // 假设只有管理员有权限 } @Override public boolean hasRole(String role) { // 判断用户是否有某个角色 return \u0026#34;admin\u0026#34;.equals(role); // 假设只有管理员有该角色 } } 通过实现 StpInterface，你可以根据实际业务需求来定制用户认证、登录状态、权限验证等操作。\n基于原有的基础 | 创建 MySQL 表单存储权限 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 -- 角色表 CREATE TABLE roles ( id BIGINT AUTO_INCREMENT PRIMARY KEY, role_name VARCHAR(50) NOT NULL ); -- 权限表 CREATE TABLE permissions ( id BIGINT AUTO_INCREMENT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL ); -- 用户角色关联表 CREATE TABLE users_roles ( user_id BIGINT NOT NULL, role_id BIGINT NOT NULL, FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (role_id) REFERENCES roles(id) ); -- 角色权限关联表 CREATE TABLE roles_permissions ( role_id BIGINT NOT NULL, permission_id BIGINT NOT NULL, FOREIGN KEY (role_id) REFERENCES roles(id), FOREIGN KEY (permission_id) REFERENCES permissions(id) ); -- 用户表 CREATE TABLE users ( id BIGINT AUTO_INCREMENT PRIMARY KEY, -- 用户唯一标识（主键） username VARCHAR(50) NOT NULL UNIQUE, -- 用户名（唯一） password VARCHAR(255) NOT NULL, -- 密码（加密存储） email VARCHAR(100) DEFAULT NULL, -- 邮箱（可选） phone VARCHAR(20) DEFAULT NULL, -- 手机号（可选） status TINYINT DEFAULT 1, -- 用户状态（1=启用, 0=禁用） create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- 创建时间 update_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- 更新时间 last_login_time TIMESTAMP NULL DEFAULT NULL -- 上次登录时间 ); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 INSERT INTO users (username, password, email, phone, status, create_time, last_login_time) VALUES (\u0026#39;zhangsan\u0026#39;, \u0026#39;$2a$10$eC9yWZaMjMEbfBOAAsXHg.SUz3aHtYZJ/riMjHJ.TOu3NHsMFTm.a\u0026#39;, \u0026#39;zhangsan@example.com\u0026#39;, \u0026#39;1234567890\u0026#39;, 1, NOW(), NULL), (\u0026#39;lisi\u0026#39;, \u0026#39;$2a$10$txB4zY7lqr9Kx.XHcGB5ruMiOBpFMHLF9rljN5iGtZ1o26g/.Agxe\u0026#39;, \u0026#39;lisi@example.com\u0026#39;, \u0026#39;0987654321\u0026#39;, 1, NOW(), NULL); INSERT INTO roles (id, role_name) VALUES (1, \u0026#39;ADMIN\u0026#39;), (2, \u0026#39;USER\u0026#39;); INSERT INTO permissions (id, permission_name) VALUES (1, \u0026#39;user.add\u0026#39;), (2, \u0026#39;user.delete\u0026#39;), (3, \u0026#39;user.update\u0026#39;), (4, \u0026#39;user.view\u0026#39;); INSERT INTO users_roles (user_id, role_id) VALUES (1, 1), -- zhangsan -\u0026gt; ADMIN (2, 2); -- lisi -\u0026gt; USER INSERT INTO roles_permissions (role_id, permission_id) VALUES (1, 1), -- ADMIN 拥有 user.add 权限 (1, 2), -- ADMIN 拥有 user.delete 权限 (1, 3), -- ADMIN 拥有 user.update 权限 (1, 4), -- ADMIN 拥有 user.view 权限 (2, 4); -- USER 只拥有 user.view 权限 注意：密码已经使用 bcrypt 加密，明文分别为：\nzhangsan: password123 lisi: mypassword UserController\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 package com.example.satokendemo.controller; import cn.dev33.satoken.stp.SaTokenInfo; import cn.dev33.satoken.stp.StpUtil; import cn.dev33.satoken.util.SaResult; import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper; import com.example.satokendemo.mapper.UserMapper; import com.example.satokendemo.mapper.PermissionMapper; import com.example.satokendemo.pojo.User; import com.example.satokendemo.util.PasswordUtil; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import java.util.List; @RestController @RequestMapping(\u0026#34;/user\u0026#34;) public class UserController { @Autowired private UserMapper userMapper; @Autowired private PermissionMapper permissionMapper; /** * 用户登录 */ @RequestMapping(\u0026#34;/doLogin\u0026#34;) public SaResult doLogin(String username, String password) { // 第1步：从数据库查询用户信息 QueryWrapper\u0026lt;User\u0026gt; queryWrapper = new QueryWrapper\u0026lt;\u0026gt;(); queryWrapper.eq(\u0026#34;username\u0026#34;, username); User user = userMapper.selectOne(queryWrapper); // 查询用户 if (user == null) { System.out.println(\u0026#34;用户不存在\u0026#34;); } else { System.out.println(\u0026#34;找到用户: \u0026#34; + user.getUsername()); } if (!PasswordUtil.verify(password, user.getPassword())) { System.out.println(\u0026#34;用户输入密码: \u0026#34; + password); System.out.println(\u0026#34;数据库存储的加密密码: \u0026#34; + user.getPassword()); System.out.println(\u0026#34;密码校验失败\u0026#34;); } // 如果用户不存在或者密码不匹配，返回登录失败 if (user == null || !PasswordUtil.verify(password, user.getPassword())) { // 使用加密策略校验密码 return SaResult.error(\u0026#34;用户名或密码错误\u0026#34;); } // 第2步：登录 StpUtil.login(user.getId()); // 第3步：加载用户信息和权限信息 StpUtil.getSession().set(\u0026#34;loginInfo\u0026#34;, user); // 加载用户权限 List\u0026lt;String\u0026gt; authList = permissionMapper.getPermissionsByUserId(user.getId()); StpUtil.getSession().set(\u0026#34;authList\u0026#34;, authList); // 第4步：获取 Token 相关参数 SaTokenInfo tokenInfo = StpUtil.getTokenInfo(); // 第5步：返回给前端 return SaResult.data(tokenInfo); } /** * 查询登录状态 */ @RequestMapping(\u0026#34;/isLogin\u0026#34;) public String isLogin() { return \u0026#34;当前会话是否登录：\u0026#34; + StpUtil.isLogin(); } /** * 获取当前登录用户信息 */ @RequestMapping(\u0026#34;/getUserInfo\u0026#34;) public User getUserInfo() { return (User) StpUtil.getSession().get(\u0026#34;loginInfo\u0026#34;); } /** * 测试方法：校验权限 - 添加操作 */ @GetMapping(\u0026#34;/add\u0026#34;) public String add() { StpUtil.checkPermission(\u0026#34;user.add\u0026#34;); return \u0026#34;ok\u0026#34;; } /** * 测试方法：校验权限 - 更新操作 */ @GetMapping(\u0026#34;/update\u0026#34;) public String update() { StpUtil.checkPermission(\u0026#34;user.update\u0026#34;); return \u0026#34;ok\u0026#34;; } } 这里我把 controller 中的模拟数据改成了 mysql 数据库的数据并将密码进行加密，注册时也可以通过相应的方法对明文密码进行加密处理后存储至数据库中，使得数据更加安全。\n完成后的图例应该如下图所示：\n数据库的用户表单（角色，权限，具体信息，绑定关系\u0026hellip;\u0026hellip;）\n在原本代码的基础上和 MySQL 连接并完成权限认证与登录 其它的表单的实体类都可以直接使用 mybatis-plus 去完成增删改查，但 permissions 表单的实体类得在 mapper 中添加一个方法使用。\nPermissionMapper 完成对权限的使用\n1 2 3 4 5 6 7 8 9 public interface PermissionMapper extends BaseMapper\u0026lt;Permission\u0026gt; { // 获取用户的所有权限名称 @Select(\u0026#34;SELECT p.permission_name \u0026#34; + \u0026#34;FROM permissions p \u0026#34; + \u0026#34;JOIN roles_permissions rp ON p.id = rp.permission_id \u0026#34; + \u0026#34;JOIN users_roles ur ON rp.role_id = ur.role_id \u0026#34; + \u0026#34;WHERE ur.user_id = #{userId}\u0026#34;) List\u0026lt;String\u0026gt; getPermissionsByUserId(@Param(\u0026#34;userId\u0026#34;) Long userId); } 之后是我 yml 的配置\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 server: # 端口 port: 8081 spring: datasource: username: root password: 20050101 url: jdbc:mysql://localhost:3306/sa_token?serverTimezone=UTC\u0026amp;userUnicode=true\u0026amp;characterEncoding=utf-8 driver-class-name: com.mysql.cj.jdbc.Driver # redis配置 redis: # Redis数据库索引（默认为0） database: 0 # Redis服务器地址 host: 127.0.0.1 # Redis服务器连接端口 port: 6379 # Redis服务器连接密码（默认为空） # password: # 连接超时时间 timeout: 10s lettuce: pool: # 连接池最大连接数 max-active: 200 # 连接池最大阻塞等待时间（使用负值表示没有限制） max-wait: -1ms # 连接池中的最大空闲连接 max-idle: 10 # 连接池中的最小空闲连接 min-idle: 0 jpa: open-in-view: false mybatis: mapper-locations: classpath:mapper/*.xml type-aliases-package: com.example.satokendemo.pojo ############## Sa-Token 配置 (文档: https://sa-token.cc) ############## sa-token: # token名称 (同时也是cookie名称) token-name: satoken # token有效期，单位s 默认30天, -1代表永不过期 timeout: 2592000 # token临时有效期 (指定时间内无操作就视为token过期) 单位: 秒 activity-timeout: -1 # 是否允许同一账号并发登录 (为true时允许一起登录, 为false时新登录挤掉旧登录) is-concurrent: true # 在多人登录同一账号时，是否共用一个token (为true时所有登录共用一个token, 为false时每次登录新建一个token) is-share: true # token风格 token-style: uuid # 是否输出操作日志 is-log: false 这是 spring boot 项目的大体框架，可以按照我这个来。\n之后启动项目 通过 api 工具 postman 进行登录测试，例如：http://localhost:8082/user/doLogin?username=lisi\u0026amp;password=mypassword\n1 2 3 4 5 6 7 8 9 10 11 12 13 /** * 示例代码：生成加密密码（可用于初始化数据库） */ public static void main(String[] args) { String userPassword = \u0026#34;password123\u0026#34;; // 明文密码 String storedPassword = \u0026#34;$2a$10$eC9yWZaMjMEbfBOAAsXHg.SUz3aHtYZJ/riMjHJ.TOu3NHsMFTm.a\u0026#34;; // 从数据库获取的加密密码 boolean isValid = PasswordUtil.verify(userPassword, storedPassword); System.out.println(\u0026#34;密码验证结果: \u0026#34; + isValid); String encryptedPassword = PasswordUtil.encrypt(userPassword); System.out.println(\u0026#34;加密后的密码: \u0026#34; + encryptedPassword); System.out.println(\u0026#34;加密后的密码与数据库中的密码是否匹配: \u0026#34; + PasswordUtil.verify(userPassword, encryptedPassword )); // 再次验证加密后的密码 } 记得用这个工具类去改一下数据库的加密密码\n使用 postman 测试后可以得到以下信息\n在 redis 中也可以看到我们的数据已经传递成功了 无论是权限还是相关的用户信息都是已经成功传到 redis 缓存了，之后就是携带 token 去测试接口调用看是否符合我们的权限。\n不携带 token 去访问接口 http://localhost:8081/user/add\n携带 token 访问\n没有相应的权限的用户携带 token 去访问\n","date":"2025-01-03T13:35:58+08:00","permalink":"https://demonskirito.github.io/p/spring-boot--redis--sa-token/","title":"Spring Boot + Redis + Sa-Token"},{"content":"参考文档 smart-doc Java Restful API 文档生成工具_smartdoc-CSDN 博客\nSpringboot 集成 Smart-Doc 生成接口文档（零注解）-CSDN 博客\n自动生成接口文档、Smart-doc（Maven 插件）使用教程 - Boblim - 博客园\n我们随便找一个 SpringBoot 的项目就可以使用，所以非常方便。\n接下来我就拿我自己的一个项目举例子。\n这是我生成完后的大体框架，一个简单的 springboot 项目\n为了使用 smart-doc 这个插件我们得先做好源代码的准备：\n书写注解 如图所示，我们得向对应的 controller 总接口和分接口 书写注解，注解的样式如图所示\n1 2 3 4 5 6 7 8 9 10 11 /** * 点赞、收藏等行为控制器 */ /** * 获取单个用户的对应博客的所有行为 * @return * @param blogId 博客ID * @param openid 微信ID */ 我们需要为每个 controller 书写相应的注解\n之后我们还得去为每个实体类 pojo 书写相应的注解去确定表单\n如下所示的代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package com.example.blog_post.pojo; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; /** * 行为表 * * @author wuhan * @date 2024/11/29 */ //使用@Data自动生成需要的get、set @Data //使用@AllArgsConstructor自动生成有参构造 @AllArgsConstructor //使用@NoArgsConstructor自动生成无参构造 @NoArgsConstructor public class Behavior { private Long id; private Long blogId; private String openid; private Boolean isFavorite; private Boolean isApproved; private Boolean isDisapproved; } 这样我们就完成了源代码的准备了，之后我们需要去导依赖的需要的 json 串。\n依赖 pom.xml\n1 2 3 4 5 6 \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.github.shalousun\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;smart-doc\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.1\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; 构建 pom.xml\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;com.github.shalousun\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;smart-doc-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.4.8\u0026lt;/version\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;!--指定生成文档的使用的配置文件,配置文件放在自己的项目中--\u0026gt; \u0026lt;configFile\u0026gt;./src/main/resources/smart-doc.json\u0026lt;/configFile\u0026gt; \u0026lt;!--指定项目名称，推荐使用动态参数，例如${project.description}--\u0026gt; \u0026lt;!--如果smart-doc.json中和此处都未设置projectName，2.3.4开始，插件自动采用pom中的projectName作为设置--\u0026gt; \u0026lt;!--\u0026lt;projectName\u0026gt;${project.description}\u0026lt;/projectName\u0026gt;--\u0026gt; \u0026lt;!--smart-doc实现自动分析依赖树加载第三方依赖的源码，如果一些框架依赖库加载不到导致报错，这时请使用excludes排除掉--\u0026gt; \u0026lt;excludes\u0026gt; \u0026lt;!--格式为：groupId:artifactId;参考如下--\u0026gt; \u0026lt;!--也可以支持正则式如：com.alibaba:.* --\u0026gt; \u0026lt;exclude\u0026gt;com.alibaba:fastjson\u0026lt;/exclude\u0026gt; \u0026lt;/excludes\u0026gt; \u0026lt;!--includes配置用于配置加载外部依赖源码,配置后插件会按照配置项加载外部源代码而不是自动加载所有，因此使用时需要注意--\u0026gt; \u0026lt;!--smart-doc能自动分析依赖树加载所有依赖源码，原则上会影响文档构建效率，因此你可以使用includes来让插件加载你配置的组件--\u0026gt; \u0026lt;includes\u0026gt; \u0026lt;!--格式为：groupId:artifactId;参考如下--\u0026gt; \u0026lt;!--也可以支持正则式如：com.alibaba:.* --\u0026gt; \u0026lt;include\u0026gt;com.alibaba:fastjson\u0026lt;/include\u0026gt; \u0026lt;/includes\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;!--如果不需要在执行编译时启动smart-doc，则将phase注释掉--\u0026gt; \u0026lt;phase\u0026gt;compile\u0026lt;/phase\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;!--smart-doc提供了html、openapi、markdown等goal，可按需配置--\u0026gt; \u0026lt;goal\u0026gt;html\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; \u0026lt;/plugin\u0026gt; 之后我们需要去 resource 路径下去创建一个 json 文件叫 smart-doc.json\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 { \u0026#34;serverUrl\u0026#34;: \u0026#34;http://127.0.0.1:8080/api-demo/\u0026#34;, \u0026#34;isStrict\u0026#34;: false, \u0026#34;allInOne\u0026#34;: true, \u0026#34;coverOld\u0026#34;: true, \u0026#34;packageFilters\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;outPath\u0026#34;: \u0026#34;src/main/resources/static/doc\u0026#34;, \u0026#34;md5EncryptedHtmlName\u0026#34;: false, \u0026#34;projectName\u0026#34;: \u0026#34;CMP基础服务API文档\u0026#34;, \u0026#34;showAuthor\u0026#34;:true, \u0026#34;dataDictionaries\u0026#34;: [ { \u0026#34;title\u0026#34;: \u0026#34;状态字典\u0026#34;, \u0026#34;enumClassName\u0026#34;: \u0026#34;cn.xx.docStatusEnum\u0026#34;, \u0026#34;codeField\u0026#34;: \u0026#34;key\u0026#34;, \u0026#34;descField\u0026#34;: \u0026#34;value\u0026#34; } ] } 创建完后我们便可以去 maven 里找到了\n启动 smart-doc:html 后我们可以在 resource 的资源路径下得到一堆文件，其中打开 index.html 我们便能得到以下文档\n我觉得是比 swagger 方便快捷的，而且可以不关联当前项目直接把 html 部署到网站上，而且支持的形式也非常多，例如还有 markdown 的格式。 ","date":"2024-12-29T17:53:27+08:00","permalink":"https://demonskirito.github.io/p/smart-doc%E5%9C%A8spring-boot%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8%E6%9B%BF%E4%BB%A3swagger%E6%97%A0%E6%B3%A8%E5%85%A5/","title":"smart-doc在spring boot中的使用（替代swagger，无注入）"},{"content":"介绍 在 spring cloud 的项目中使用 RabbitMQ 之前得先给自己的电脑配置 RabbitMQ\n超详细的 RabbitMQ 入门，看这篇就够了！-阿里云开发者社区\n我是根据该篇文章配置的 RabbitMQ。\n下载 RabbitMQ 先配置语言环境，一直 next 就行\nOtp 20.0 - Erlang/OTP\n编辑 erl 语言的环境变量\n配置完后进入 cmd 查询语言配置是否成功。\n版本记得对应上，erl 和 rabbitmq 的版本兼容问题记得注意一下，或者跟着我的配也可以。\n我选的 RabbitMQ 的版本是 3.7.3。\n之后一直 next 就行，然后找到安装路径后操作，打开对应栏的控制台然后输入\nrabbitmq-plugins enable rabbitmq_management\n安装插件\n安装完插件后记得用命令启动（shell）\nrabbitmqctl status\n之后输入网址 http://localhost:15672，账号密码默认是：guest/guest\nSpringCloud 简单实例 整体框架如下图，如果有什么不懂可以看看我之前的文章，从零开始搭建一个属于自己的 SpringCloud 项目\n生产者和服务者的模块都得导入相关的 RabbitMQ 的依赖\n1 2 3 4 \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-amqp\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; 在两个模块的 application.yml 中配置 RabbitMQ 的连接信息：\n1 2 3 4 5 6 7 spring: rabbitmq: host: localhost # RabbitMQ 主机地址 port: 5672 username: guest password: guest queue-name: myQueue # 自定义队列名称 生产者模块（order80） 配置类（RabbitMQconfig）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import org.springframework.amqp.core.Binding; import org.springframework.amqp.core.BindingBuilder; import org.springframework.amqp.core.Queue; import org.springframework.amqp.core.TopicExchange; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; @Configuration public class RabbitMQConfig { // 队列名称 private final String queueName = \u0026#34;myQueue\u0026#34;; @Bean public Queue queue() { return new Queue(queueName, true); // 设置队列持久化 } @Bean public TopicExchange exchange() { return new TopicExchange(\u0026#34;myExchange\u0026#34;); } @Bean public Binding binding(Queue queue, TopicExchange exchange) { return BindingBuilder.bind(queue).to(exchange).with(\u0026#34;routing.key\u0026#34;); } } Service 类\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import org.springframework.amqp.rabbit.core.RabbitTemplate; import org.springframework.beans.factory.annotation.Value; import org.springframework.stereotype.Service; @Service public class MessageProducer { private final RabbitTemplate rabbitTemplate; @Value(\u0026#34;${spring.queue-name}\u0026#34;) private String queueName; public MessageProducer(RabbitTemplate rabbitTemplate) { this.rabbitTemplate = rabbitTemplate; } public void sendMessage(String message) { rabbitTemplate.convertAndSend(queueName, message); System.out.println(\u0026#34;Sent message: \u0026#34; + message); } } Controller 类\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; @RestController public class MessageController { private final MessageProducer messageProducer; public MessageController(MessageProducer messageProducer) { this.messageProducer = messageProducer; } @GetMapping(\u0026#34;/send\u0026#34;) public String sendMessage(@RequestParam String message) { messageProducer.sendMessage(message); return \u0026#34;Message sent: \u0026#34; + message; } } 消费者模块（consumer8001） 接收类\n1 2 3 4 5 6 7 8 9 10 11 12 import org.springframework.amqp.rabbit.annotation.RabbitListener; import org.springframework.stereotype.Service; @Service public class MessageConsumer { @RabbitListener(queues = \u0026#34;${spring.queue-name}\u0026#34;) public void receiveMessage(String message) { System.out.println(\u0026#34;Received message: \u0026#34; + message); // 可以在这里进行消息处理逻辑 } } 调试 我之后便在 postman 中进行调试该接口\n可以看出来该接口是可以成功使用的，之后我们便去看看控制台和 RabbitMQ 的输出与反应，对应如图所示：\n控制台的输出与接收：\nRabbitMQ 的使用：\n","date":"2024-12-29T17:37:11+08:00","permalink":"https://demonskirito.github.io/p/%E7%AE%80%E5%8D%95%E7%A4%BA%E8%8C%83rabbitmq%E5%9C%A8spring-cloud%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/","title":"简单示范RabbitMQ在Spring Cloud中的使用"},{"content":"介绍 紧接上文的熔断器，往 spring cloud 项目中写入网关模块\n这是项目的整体架构，还没有写入自定义的网关过滤类，但可以使用一些自带的过滤服务\n先创建一个启动类 GatewayMain9527\n1 2 3 4 5 6 7 8 9 10 11 package com.gaolang; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class GatewayMain9527 { public static void main(String[] args) { SpringApplication.run(GatewayMain9527.class,args); } } 再创建一个配置类 application.yml\n参考 SpringCloud-Gateway 网关的使用_gateway 搭建网关-CSDN 博客\n这里可以看到，我们在 routes（网关路由）下配置了 filters（过滤器）。\nStripPrefix=1：表示从请求的 URI 中去除前缀的数量。在这里，1 表示去除两级路径的前缀。例如，如果原始请求是 /path1/rest-of-the-uri，使用此配置后，转发到后端的请求 URI 将是 /rest-of-the-uri。 AddRequestHeader=test_header, damon0806：表示在请求头中添加一个自定义的头部。具体来说，它添加了一个名为 test_header 的头部，其值为 damon0806。这可以用于在请求发送到后端服务时传递额外的信息或标识。\n发现有点问题就用 AddResponseHeader 代替了，看 get 拉取的数据中的请求头中是否包含了这些数据。StripPrefix=1 这个加上后会出大问题\u0026hellip;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 server: port: 9527 spring: application: name: cloud-gateway9527 cloud: nacos: server-addr: localhost:8848 gateway: discovery: locator: enabled: true # 开启自动路由 routes: # 网关路由配置 - id: gateway-service # 路由id，自定义，唯一 uri: lb://cloud-customer-order80 # 路由的目标地址，lb表示负载均衡 predicates: # 路由断言，判断请求是否符合路由规则 - Path=/customer/** # 要求请求路径以/user/开头，否则404 filters: - AddResponseHeader=foo, bar-config-response 依赖导入这几个就够了\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ​ \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-gateway\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-alibaba-nacos-discovery\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--客户端负载均衡loadbalancer--\u0026gt; \u0026lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud- starter-loadbalancer --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-loadbalancer\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; 写完以上所有部分我们就可以开始测试阶段了\n测试 在测试前我们可以看一下 nacos 我们的模块有没有注册成功\n我们用 postman 进行测试接口的访问\n这里可以看出来我们是成功了\nGateWay 过滤器（Filter） 新建一个过滤器类\n1 MyGlobalFilter 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 package com.gaolang.filter; import org.springframework.cloud.gateway.filter.GatewayFilterChain; import org.springframework.cloud.gateway.filter.GlobalFilter; import org.springframework.core.Ordered; import org.springframework.http.HttpStatus; import org.springframework.stereotype.Component; import org.springframework.web.server.ServerWebExchange; import reactor.core.publisher.Mono; @Component public class MyGlobalFilter implements GlobalFilter, Ordered { @Override public Mono\u0026lt;Void\u0026gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) { String username = exchange.getRequest().getQueryParams().getFirst(\u0026#34;username\u0026#34;); if (username == null) { exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE); return exchange.getResponse().setComplete(); } // 放行 return chain.filter(exchange); } // 表示排名 @Override public int getOrder() { return 0; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 package com.gaolang.filter; import org.springframework.cloud.gateway.filter.GatewayFilterChain; import org.springframework.cloud.gateway.filter.GlobalFilter; import org.springframework.core.Ordered; import org.springframework.stereotype.Component; import org.springframework.web.server.ServerWebExchange; import reactor.core.publisher.Mono; @Component public class MyGlobalFilter implements GlobalFilter, Ordered { @Override public Mono\u0026lt;Void\u0026gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) { System.out.println(\u0026#34;自定义全局过滤器执行了~~~\u0026#34;); return chain.filter(exchange);//放行 } /** * 过滤器排序 * @return 数值越小 越先执行 */ @Override public int getOrder() { return 0; } } 这需要 IP 端口后加入 Param 例如：该 filter 便需要用户加入 username=wuhan\n看控制台输出，说明我的过滤类启用了。\n","date":"2024-12-19T17:00:16+08:00","permalink":"https://demonskirito.github.io/p/spring-cloud-gateway%E7%9A%84%E4%BD%BF%E7%94%A8/","title":"Spring Cloud Gateway的使用"},{"content":"为什么我会将 Hystrix 的熔断器换成 resilience4j，因为尝试了半天发现虽然 Hystrix 的熔断器可以正常使服务降级，单个 api 接口可以返回 fallback 错误信息，但是不能使得服务熔断，具体原因可能就是注解失效，被放弃了，所以后面边将熔断器换成了当前的熔断器 resilience4j\n具体可以看看这篇博客，这篇博客详细写了如何使用 resilience4j 熔断器去使服务下降和服务熔断。 OpenFeign 熔断与降级_openfeign 熔断降级-CSDN 博客\n紧接上文的熔断器使服务降级\nresilience4j 的依赖下载：\n1 2 3 4 \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-circuitbreaker-resilience4j\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; 架构如图所示：\nIProductClientServiceFallbackFactory 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 package com.gaolang.fallback; import com.gaolang.FeignClient.OrderFeignClient; import com.gaolang.entities.CommonResult; import com.gaolang.entities.Payment; import org.springframework.cloud.openfeign.FallbackFactory; import org.springframework.stereotype.Component; public class IProductClientServiceFallbackFactory implements FallbackFactory\u0026lt;OrderFeignClient\u0026gt; { @Override public OrderFeignClient create(Throwable cause) { return new OrderFeignClient() { @Override public CommonResult create(Payment payment) { return new CommonResult\u0026lt;\u0026gt;(444,\u0026#34;服务降级返回,---PaymentFallbackService\u0026#34;); } @Override public CommonResult getPaymentById(Long id) { return new CommonResult\u0026lt;\u0026gt;(444,\u0026#34;服务降级返回,---PaymentFallbackService\u0026#34;); } }; } } OrderFeignClient 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 package com.gaolang.FeignClient; import com.gaolang.entities.CommonResult; import com.gaolang.entities.Payment; import com.gaolang.fallback.IProductClientServiceFallbackFactory; import org.springframework.cloud.openfeign.FeignClient; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.PostMapping; @FeignClient(value = \u0026#34;cloud-provider-payment8001\u0026#34;, fallbackFactory = IProductClientServiceFallbackFactory.class) // 指定调用的服务名称 public interface OrderFeignClient { @PostMapping(value = \u0026#34;/payment/create\u0026#34;) CommonResult create(Payment payment); // 创建支付记录 @GetMapping(value = \u0026#34;/payment/{id}\u0026#34;) CommonResult getPaymentById(@PathVariable(\u0026#34;id\u0026#34;) Long id); // 根据 ID 获取支付记录 } FallbackConfig 1 2 3 4 5 6 7 8 9 10 11 package com.gaolang.config; import com.gaolang.fallback.IProductClientServiceFallbackFactory; import org.springframework.context.annotation.Bean; public class FallbackConfig { @Bean public IProductClientServiceFallbackFactory iArticleClientFallbackFactory() { return new IProductClientServiceFallbackFactory(); } } OrderMain80 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 package com.gaolang; import com.gaolang.config.FallbackConfig; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker; import org.springframework.cloud.client.loadbalancer.LoadBalanced; //import org.springframework.cloud.netflix.hystrix.EnableHystrix; import org.springframework.cloud.openfeign.EnableFeignClients; import org.springframework.context.annotation.Bean; import org.springframework.web.client.RestTemplate; @SpringBootApplication @EnableFeignClients(basePackages = \u0026#34;com.gaolang\u0026#34;, defaultConfiguration = FallbackConfig.class) public class OrderMain80 { public static void main(String[] args) { SpringApplication.run(OrderMain80.class,args); } @LoadBalanced // 使 RestTemplate 自动支持 Ribbon 负载均衡 @Bean public RestTemplate restTemplate() { return new RestTemplate(); } } 单启动该模块后，对 api 进行测试 http://localhost:80/customer/payment/1后的结果如图所示：\n成功使得服务熔断。\n","date":"2024-12-19T16:53:03+08:00","permalink":"https://demonskirito.github.io/p/spring-cloud%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%ADresilience4j/","title":"Spring Cloud的服务熔断（resilience4j）"},{"content":"在消费者中加入依赖\n1 2 3 4 5 6 \u0026lt;!--熔断器--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-netflix-hystrix\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.1.5.RELEASE\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 在启动类中加入注解@EnableCircuitBreaker 和@EnableHystrix\n所以改变后的启动类在继上一篇博客后的代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 package com.gaolang; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker; import org.springframework.cloud.client.loadbalancer.LoadBalanced; import org.springframework.cloud.netflix.eureka.EnableEurekaClient; import org.springframework.cloud.netflix.hystrix.EnableHystrix; import org.springframework.cloud.openfeign.EnableFeignClients; import org.springframework.context.annotation.Bean; import org.springframework.web.client.RestTemplate; @SpringBootApplication @EnableCircuitBreaker @EnableFeignClients @EnableHystrix public class OrderMain80 { public static void main(String[] args) { SpringApplication.run(OrderMain80.class,args); } @LoadBalanced // 使 RestTemplate 自动支持 Ribbon 负载均衡 @Bean public RestTemplate restTemplate() { return new RestTemplate(); } } 而 controller 层的代码使用熔断器后因如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 @Autowired private OrderFeignClient orderFeignClient; // 注入 Feign 客户端 @PostMapping(value = \u0026#34;/customer/payment/create\u0026#34;) public CommonResult\u0026lt;Payment\u0026gt; create(Payment payment){ return orderFeignClient.create(payment); } @HystrixCommand(fallbackMethod = \u0026#34;listByHystirx\u0026#34;,commandProperties = { @HystrixProperty(name = \u0026#34;circuitBreaker.requestVolumeThreshold\u0026#34;, value = \u0026#34;5\u0026#34;), //请求次数 }) //如果请求次数达到5次都是失败，那么直接调用listByHystirx @GetMapping(value = \u0026#34;/customer/payment/{id}\u0026#34;) public CommonResult\u0026lt;Payment\u0026gt; getPaymentById(@PathVariable(\u0026#34;id\u0026#34;) Long id){ CommonResult result = orderFeignClient.getPaymentById(id); System.out.println(\u0026#34;result: \u0026#34; + result); return result; } // 修改后的回退方法 public CommonResult\u0026lt;Payment\u0026gt; listByHystirx(Long id) { return new CommonResult\u0026lt;\u0026gt;(444, \u0026#34;服务端已停止服务\u0026#34;, null); } 因为这是单个 api 接口的回退方法所以\n回退方法 listByHystirx 的参数类型必须与 getPaymentById 方法完全一致，即 Long id。 回退方法的返回类型也必须与 getPaymentById 保持一致，即 CommonResult ","date":"2024-12-19T16:42:34+08:00","permalink":"https://demonskirito.github.io/p/spring-cloud-hystrix%E7%86%94%E6%96%AD%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7/","title":"Spring Cloud Hystrix熔断器的使用（服务降级）"},{"content":"前言 紧接我的上一篇博客\nSpringCloud Nacos+ribbon 的实现方法-CSDN 博客\n这里将替换调原来使用 restTemplate 调用 url 和使用拼接字符串指定地址，这里先建议了解一下两种传统方法在 controller 的使用。\nSpringCloud Nacos + Ribbon 调用服务的 2 种方法！_resttemplate nacos-CSDN 博客\n了解完后才能理解 fegin 的方便与可取之处\n相当于是将其它模块的 service 和 serviceimpl 全部写在了 FeginClient 中\n这是消费者的结构，而提供者和综合类的结构不进行改变\nOrderFeignClient 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package com.gaolang.FeignClient; import com.gaolang.entities.CommonResult; import com.gaolang.entities.Payment; import org.springframework.cloud.openfeign.FeignClient; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.PostMapping; @FeignClient(value = \u0026#34;cloud-provider-payment8001\u0026#34;) // 指定调用的服务名称 public interface OrderFeignClient { @PostMapping(value = \u0026#34;/payment/create\u0026#34;) CommonResult create(Payment payment); // 创建支付记录 @GetMapping(value = \u0026#34;/payment/{id}\u0026#34;) CommonResult getPaymentById(@PathVariable(\u0026#34;id\u0026#34;) Long id); // 根据 ID 获取支付记录 } OrderController 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 package com.gaolang.controller; import com.gaolang.FeignClient.OrderFeignClient; import com.gaolang.entities.CommonResult; import com.gaolang.entities.Payment; import lombok.extern.slf4j.Slf4j; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.*; import org.springframework.web.client.RestTemplate; import javax.annotation.Resource; @RestController @Slf4j public class OrderController { // @Resource // private RestTemplate restTemplate; // // // 服务提供者的名称 // private static final String PAYMENT_URL = \u0026#34;http://cloud-provider-payment8001\u0026#34;; // // @PostMapping(\u0026#34;customer/payment/create\u0026#34;) // public CommonResult\u0026lt;Payment\u0026gt; create(Payment payment) { // return restTemplate.postForObject(PAYMENT_URL + \u0026#34;/payment/create\u0026#34;, payment, CommonResult.class); // } // // @GetMapping(\u0026#34;customer/payment/{id}\u0026#34;) // public CommonResult\u0026lt;Payment\u0026gt; getPaymentById(@PathVariable(\u0026#34;id\u0026#34;) Long id) { // CommonResult result = restTemplate.getForObject(PAYMENT_URL + \u0026#34;/payment/\u0026#34; + id, CommonResult.class); // System.out.println(\u0026#34;result: \u0026#34; + result); // return result; // } @Autowired private OrderFeignClient orderFeignClient; // 注入 Feign 客户端 @PostMapping(value = \u0026#34;/customer/payment/create\u0026#34;) public CommonResult\u0026lt;Payment\u0026gt; create(Payment payment){ return orderFeignClient.create(payment); } @GetMapping(value = \u0026#34;/customer/payment/{id}\u0026#34;) public CommonResult\u0026lt;Payment\u0026gt; getPaymentById(@PathVariable(\u0026#34;id\u0026#34;) Long id){ CommonResult result = orderFeignClient.getPaymentById(id); System.out.println(\u0026#34;result: \u0026#34; + result); return result; } } application.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 server: port: 80 spring: cloud: nacos: discovery: server-addr: 127.0.0.1:8848 # 配置nacos 服务端地址 application: name: cloud-customer-order80 feign: client: config: default: # default全局的配置 loggerLevel: BASIC # 日志级别，BASIC就是基本的请求和响应信息 httpclient: enabled: true # 开启feign对HttpClient的支持 max-connections: 200 # 最大的连接数 max-connections-per-route: 50 # 每个路径的最大连接数 这里我搜集了大量的资料了解了下，后续会更加深入了解这部分的关系。 SpringCloud Feign 远程调用（史上最详细讲解）-阿里云开发者社区\n","date":"2024-12-17T14:40:37+08:00","permalink":"https://demonskirito.github.io/p/springcloud-fegin%E7%9A%84%E4%BD%BF%E7%94%A8/","title":"SpringCloud Fegin的使用"},{"content":"前提 【SpringCloud】IDEA 如何创建一个 SpringCloud 项目_idea 新建一个 springcloud 项目-CSDN 博客\n根据该博客先创建一个微服务的大体框架\n[小白学 Nacos] Nacos 安装，部署，配置，快速入门_nacos 安装配置和部署教程-CSDN 博客\n在配置 spring cloud 的 nacos 和 ribbon 前得先下载 Nacos 在本地运行起来\n如下图\n改正本体框架的 pom.xml 和 yml，公共类不改变，消费者和提供者得进行改变\ncloud-customer-order80 改变 OrderController，使用@LoadBalanced 和 RestTemplate\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 package com.gaolang.controller; import com.gaolang.entities.CommonResult; import com.gaolang.entities.Payment; import lombok.extern.slf4j.Slf4j; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.client.RestTemplate; import javax.annotation.Resource; @RestController @Slf4j public class OrderController { @Resource private RestTemplate restTemplate; // 服务提供者的名称 private static final String PAYMENT_URL = \u0026#34;http://cloud-provider-payment8001\u0026#34;; @PostMapping(\u0026#34;customer/payment/create\u0026#34;) public CommonResult\u0026lt;Payment\u0026gt; create(Payment payment) { return restTemplate.postForObject(PAYMENT_URL + \u0026#34;/payment/create\u0026#34;, payment, CommonResult.class); } @GetMapping(\u0026#34;customer/payment/{id}\u0026#34;) public CommonResult\u0026lt;Payment\u0026gt; getPaymentById(@PathVariable(\u0026#34;id\u0026#34;) Long id) { CommonResult result = restTemplate.getForObject(PAYMENT_URL + \u0026#34;/payment/\u0026#34; + id, CommonResult.class); System.out.println(\u0026#34;result: \u0026#34; + result); return result; } } application.yml\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 server: port: 80 spring: cloud: nacos: discovery: server-addr: 127.0.0.1:8848 # 配置nacos 服务端地址 application: name: cloud-customer-order80 该模块下 pom.xml\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;artifactId\u0026gt;dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;groupId\u0026gt;org.example\u0026lt;/groupId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;artifactId\u0026gt;cloud-customer-order80\u0026lt;/artifactId\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;maven.compiler.source\u0026gt;8\u0026lt;/maven.compiler.source\u0026gt; \u0026lt;maven.compiler.target\u0026gt;8\u0026lt;/maven.compiler.target\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.example\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;cloud-api-commons\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${project.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-actuator\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;optional\u0026gt;true\u0026lt;/optional\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.netflix.ribbon\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;ribbon-loadbalancer\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.3.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- loadbalancer --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-loadbalancer\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/project\u0026gt; cloud-provider-payment8001 application.yml\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 server: port: 8001 spring: cloud: nacos: discovery: server-addr: 127.0.0.1:8848 # 配置nacos 服务端地址 application: name: cloud-provider-payment8001 datasource: type: com.alibaba.druid.pool.DruidDataSource driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/springcloudtest?serverTimezone=UTC\u0026amp;useUnicode=true\u0026amp;characterEncoding=utf8\u0026amp;useSSL=false username: root password: ****** mybatis: mapper-locations: classpath:mapper/*.xml type-aliases-package: com.gaolang.entities # 所有Entity 别名类所在包 该模块下的 pom.xml\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;artifactId\u0026gt;dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;groupId\u0026gt;org.example\u0026lt;/groupId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;artifactId\u0026gt;cloud-provider-payment8001\u0026lt;/artifactId\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;maven.compiler.source\u0026gt;8\u0026lt;/maven.compiler.source\u0026gt; \u0026lt;maven.compiler.target\u0026gt;8\u0026lt;/maven.compiler.target\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;!--导入公共部分实体类cloud-api-commons--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.example\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;cloud-api-commons\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${project.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-actuator\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.mybatis.spring.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mybatis-spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;druid-spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.1.10\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--mysql-connector-java--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;mysql\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mysql-connector-java\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--jdbc--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-jdbc\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;optional\u0026gt;true\u0026lt;/optional\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/project\u0026gt; 总的 pom.xml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;modules\u0026gt; \u0026lt;module\u0026gt;cloud-api-commons\u0026lt;/module\u0026gt; \u0026lt;module\u0026gt;cloud-provider-payment8001\u0026lt;/module\u0026gt; \u0026lt;module\u0026gt;cloud-customer-order80\u0026lt;/module\u0026gt; \u0026lt;/modules\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-parent\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.4.2\u0026lt;/version\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;groupId\u0026gt;org.example\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;name\u0026gt;dependencies\u0026lt;/name\u0026gt; \u0026lt;description\u0026gt;统一依赖\u0026lt;/description\u0026gt; \u0026lt;packaging\u0026gt;pom\u0026lt;/packaging\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;java.version\u0026gt;1.8\u0026lt;/java.version\u0026gt; \u0026lt;java.source\u0026gt;1.8\u0026lt;/java.source\u0026gt; \u0026lt;project.build.sourceEncoding\u0026gt;UTF-8\u0026lt;/project.build.sourceEncoding\u0026gt; \u0026lt;project.reporting.outputEncoding\u0026gt;UTF-8\u0026lt;/project.reporting.outputEncoding\u0026gt; \u0026lt;spring-cloud.version\u0026gt;2020.0.1\u0026lt;/spring-cloud.version\u0026gt; \u0026lt;spring-cloud-alibaba.version\u0026gt;2021.1\u0026lt;/spring-cloud-alibaba.version\u0026gt; \u0026lt;spring-bootstrap.version\u0026gt;3.0.3\u0026lt;/spring-bootstrap.version\u0026gt; \u0026lt;commons.version\u0026gt;3.12.0\u0026lt;/commons.version\u0026gt; \u0026lt;fastjson.version\u0026gt;1.2.78\u0026lt;/fastjson.version\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring-cloud.version}\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-alibaba-dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring-cloud-alibaba.version}\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.mysql\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mysql-connector-j\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;druid\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.2.6\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.mybatis.spring.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mybatis-spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.2.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--spring cloud Hoxton.SR1--\u0026gt; \u0026lt;!-- \u0026lt;dependency\u0026gt;--\u0026gt; \u0026lt;!-- \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt;--\u0026gt; \u0026lt;!-- \u0026lt;artifactId\u0026gt;spring-cloud-dependencies\u0026lt;/artifactId\u0026gt;--\u0026gt; \u0026lt;!-- \u0026lt;version\u0026gt;Hoxton.SR1\u0026lt;/version\u0026gt;--\u0026gt; \u0026lt;!-- \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt;--\u0026gt; \u0026lt;!-- \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt;--\u0026gt; \u0026lt;!-- \u0026lt;/dependency\u0026gt;--\u0026gt; \u0026lt;!--junit--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;junit\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;junit\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.8.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--log4j--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;log4j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;log4j\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.2.12\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-actuator\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-alibaba-nacos-discovery\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-alibaba-nacos-config\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-bootstrap\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring-bootstrap.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;fastjson\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${fastjson.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;optional\u0026gt;true\u0026lt;/optional\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.commons\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;commons-lang3\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${commons.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.7.5\u0026lt;/version\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; \u0026lt;/project\u0026gt; 实现结果 ","date":"2024-12-16T21:46:08+08:00","permalink":"https://demonskirito.github.io/p/springcloud-nacos-ribbon%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/","title":"SpringCloud Nacos+ribbon的实现方法"},{"content":"介绍 在使用宝塔面板之前得先开个服务器，我这里使用的是阿里云服务器。\n安全组添加一下接口：\n远程连接至面板：\n宝塔面板下载指令：\n根据当前操作系统\n宝塔面板下载，免费全能的服务器运维软件\n在宝塔官网根据操作系统的配置选择命令输入到远程连接的面板中下载宝塔面板。\n进入宝塔面板后是这样的\n后端在宝塔面板部署 jar 包 这是 phpmyadmin 的问题，得先去卸载 java 环境下载后的 phpmyadmin 再重新下载，之后就可以正常进入 phpmyadmin 的操作面板。\n宝塔面板 phpMyAdmin 报 405 not allowed 错误及 PHP 与 phpMyAdmin 不兼容问题_phpmyadmin 405 not allowed-CSDN 博客\n选择对应的版本在软件商店进行下载。\n对于 jar 包的测试得先下载 tomcat，而 jdk 可以选择 jar 包中携带的 jdk 版本。\n打包 spring boot 项目的 jar 包 在打包前我这里因为 spring cloud 踩了个坑，settings.xml 的 maven 镜像出现了问题，会爆红找不到\nspring-boot.version。\n上映射路径对比一下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 \u0026lt;mirrors\u0026gt; \u0026lt;!-- 这是spring cloud的镜像路径 --\u0026gt; \u0026lt;mirror\u0026gt; \u0026lt;id\u0026gt;nexus-aliyun\u0026lt;/id\u0026gt; \u0026lt;mirrorOf\u0026gt;Maven\u0026lt;/mirrorOf\u0026gt; \u0026lt;name\u0026gt;Nexus aliyun\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;https://maven.aliyun.com/repository/public\u0026lt;/url\u0026gt; \u0026lt;/mirror\u0026gt; \u0026lt;!-- 这是spring boot的镜像路径 --\u0026gt; \u0026lt;mirror\u0026gt; \u0026lt;id\u0026gt;alimaven\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;aliyun maven\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;http://maven.aliyun.com/nexus/content/groups/public/\u0026lt;/url\u0026gt; \u0026lt;mirrorOf\u0026gt;*\u0026lt;/mirrorOf\u0026gt; \u0026lt;/mirror\u0026gt; \u0026lt;/mirrors\u0026gt; spring cloud 项目和 spring boot 项目的镜像转换，我用了两个 settings.xml，以后在 idea 中切换 maven 的 xml 路径就可以了，这里把 jar 包打出来后面有用。\n数据库的数据转成 sql 文件 我用的数据库是 MySql，软件用的是 Navicat\n转存后可以得到一个 sql 文件\n之后我们会用到这些东西。\n宝塔面板部署数据库和 jar 包 最好根据你项目的 yml 配置去配置当前宝塔面板的数据库的数据库名，用户名，密码\n举一个例子：\n这里我的 jar 包配置文件如图所示：\n数据库名：blog\nusername：blog\npassword：20050101\n宝塔面板配置和其一样\n之后我们便要使用到上文中转存的 sql 文件，将数据同步入数据库。\n在这里设置数据库访问的密码，用来进入 phpmyadmin 的操作面板对数据库进行操作。\n用户默认都是 root，密码就是刚才设置的值\n部署完数据库和 jar 包后记得去服务器的安全组和宝塔面板的防火墙开放端口号。\n开放完端口号后就可以去测试 api 接口是否能拉取到数据库的数据，我这里使用 postman 进行调试。\n测试完 8081 和 8082 端口都可以获取到数据\n宝塔面板部署前端 vue 项目 在 vue 项目中使用命令\nnpm run build 去打包 vue 项目成 dist 文件夹，如果文件夹内容过大，可以再打包成 rar 格式\n然后我们进入宝塔面板先根据我们的域名和 ip 地址创建 php 项目来构建 vue 项目\n然后去文件夹创建的根目录下去把刚才的 dist 文件夹或者 rar 拖入\n把网站站点改到 dist 目录下：\n这样一个 vue 项目就发布到公网 ip 上了。\n这里部署前端记得改一下这个地方，防止后面加后缀访问页面报错。\n","date":"2024-12-16T21:38:47+08:00","permalink":"https://demonskirito.github.io/p/%E5%88%A9%E7%94%A8%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81/","title":"利用宝塔面板快速部署前后端代码"},{"content":"建站技术 | HUGO + GitHub 创建博客页面 1.前言 我通过参考大量的hugo框架的使用，最后终于在收集整理并使用得出了较好的部署方式。 先将我使用到的网站地址全放在前言供大家查阅与使用（并附带说明）。\n简略建站的前提文章： 【Hugo】Hugo + Github 免费部署自己的博客\n后续跟进的博客内容文章： 建站技术 | 使用 Hugo + Stack 简单搭建一个博客\n我主要使用了这两篇博客的内容，其中详细的使用我会娓娓道来。\n2.hugo下载 下载地址：标签 · gohugoio/hugo\n3.搭建博客 3.1 在hugo.exe所在文件夹的地址栏敲打cmd，然后Enter唤起命令行 3.2 敲打命令hugo new site xxxx创建hugo文件 3.3 敲打命名cd xxxx切换目录，并把hugo.exe复制到刚生成的文件夹中 3.4 敲打命令hugo server -D启动服务，访问http://localhost:1313，Ctrl+C停止服务 3.5 配置主题 主题下载地址：Complete List | Hugo Themes\n我们这里以stack主题为例：发行版 · CaiJimmy/hugo-theme-stack\n这边以【Stack主题】为例，将下载好的主题解压，放到/themes文件夹中并将文件夹重新命名为hugo-theme-stack\n将exampleSite样例数据中的 Content 和 hugo.yaml 复制到主文件夹中，并删掉hugo.toml和content/post/rich-content\n再次启动hugo服务，查看主题，具体主题配置修改 hugo.yaml，这里不细说，感兴趣可自行查找相关文章\n至此，在本地搭建一个博客已经完成了\n3.6 了解hugo框架的逻辑 因为本人在借鉴他人的博客时，其实还是会有许多不懂的地方，所以就对结构进行了些许分析，希望能给后续读者提供一些帮助。\n在archetypes下是生成markdown文件的模板\n可以和我的模板使用一样\ncategories.md 和 tags.md\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 --- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; slug: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; description: image: cover.png style: background: \u0026#34;#2a9d8f\u0026#34; color: \u0026#34;#fff\u0026#34; --- default.md\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 --- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; slug: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; description: date: \u0026#34;{{ .Date }}\u0026#34; lastmod: \u0026#34;{{ .Date }}\u0026#34; image: cover.png math: license: hidden: false draft: false categories: [\u0026#34;\u0026#34;] tags: [\u0026#34;\u0026#34;] --- ## 附录 ### 参考文献 ### 版权信息 在content下的是分类，导航栏，博客的发布首页\n一般我们的博客发布都在content/post这个文件夹中\n而图中的img文件夹是我们的头像的存放地址，可以直接将avatar.png替换掉，也可以像我一样放进去图片后去yaml文件中改配置类。\n4.hugo.yaml 4.1 配置导航栏左侧的图标并能够响应 话不多说，先上代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 social: - identifier: github name: GitHub url: https://github.com/Demonskirito params: icon: github - identifier: twitter name: Twitter url: https://twitter.com params: icon: twitter - identifier: bilibili name: bilibili url: https://space.bilibili.com/268011948 params: icon: bilibili-line - identifier: email name: Email url: mailto:wh2919907118@gamil.com params: icon: email 这是我的导航栏图标配置，在这里我使用的svg是从iconfont-阿里巴巴矢量图标库获取的，svg的尺寸设置24寸，颜色选择#2c3e50，将下载下来的图标放到 \\assets\\icons\\ 文件夹（themes下的）下，然后修改社交媒体的配置。\n将所有的 #2c3e50 都替换成 currentColor，也就是使用样式设置的颜色。\n4.2配置评论功能 博客中的评论系统是很重要的。这里我使用的是 Stack 模板支持的 Waline，搭建很简单，可以参考 Waline 官方指南\n配置 Waline 则可以参考这篇博客 hugo：添加评论功能（Waline） - 建站指南，我的 Waline 配置：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 comments: enabled: true provider: waline waline: # 这里填你的vercel服务器地址。 # vercel自定义域名会和cloudflare会冲突导致无限301,所以干脆直接用送的域名了 # 注意要部署总域名，而不是最新部署的版本域名（中间有一段随机英文字符的），否则会报 401 Unauthorized serverURL: https://waline-你的用户名.vercel.app/ lang: zh-CN # 文章浏览量统计，在新版waline中已更名为pageview属性，貌似用不了了 # 填入false代表不启用，填入字符串的时候会作为css选择器 visitor: false # 头像来源，在V2中已移除该属性 avatar: emoji: - https://npm.elemecdn.com/@waline/emojis@1.1.0/bilibili - https://npm.elemecdn.com/@waline/emojis@1.1.0/bmoji - https://npm.elemecdn.com/@waline/emojis@1.1.0/weibo # 回复时必填的内容 requiredMeta: - name - email - url # 评论框的默认的文字 placeholder: 欢迎留下宝贵的评论！ # 自定义语言设置，参考https://waline.js.org/cookbook/customize/locale.html#locale-%E9%80%89%E9%A1%B9 locale: admin: 站长 sofa: 还没有人评论哦！快来抢沙发吧~ LeadCloud的部署还是非常简单的，建议使用国际版，畅通无阻啊\nVercel的部署，你需要先去登录注册后在去拉取waline的项目创建进入github中\n创建的时候页面应该如下图：\n我是按照文献的步骤一步步来的，所以没有问题，大家安心配就行。\n5.使用 Hugo 创建文章 为了更加快捷的创建文章，我这里将命令简化为bat指令，一共三个bat\n创建标签.bat\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 @echo off :: 显示创建标签提示 echo [创建标签] :: 提示输入标签名 set /p input=请输入标签名: :: 检查用户是否输入内容 if \u0026#34;%input%\u0026#34;==\u0026#34;\u0026#34; ( echo 标签名不能为空，请重新运行脚本。 pause exit /b ) :: 使用 Hugo 创建标签 hugo new tags/%input%/_index.md :: 暂停脚本，等待用户 创建类别.bat\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 @echo off :: 显示创建类别提示 echo [创建类别] :: 提示输入类别名 set /p input=请输入类别名: :: 检查用户是否输入内容 if \u0026#34;%input%\u0026#34;==\u0026#34;\u0026#34; ( echo 类别名不能为空，请重新运行脚本。 pause exit /b ) :: 使用 Hugo 创建类别 hugo new categories/%input%/_index.md :: 暂停脚本，等待用户确认 pause 创建文章.bat\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 @echo off :: 创建文章 echo [创建文章] :: 提示输入 Slug set /p input=请输入文章 Slug: :: 获取当前日期时间 for /f \u0026#34;tokens=2 delims==\u0026#34; %%i in (\u0026#39;wmic os get localdatetime /value ^| find \u0026#34;=\u0026#34;\u0026#39;) do set datetime=%%i set year=%datetime:~0,4% set month=%datetime:~4,2% set day=%datetime:~6,2% :: 使用 Hugo 创建新文章 hugo new post/%year%/%month%%day%-%input%/index.md :: 暂停脚本，等待用户确认 pause 6.生成静态网页 在完成编写之后，就可以生成网页了。\n运行以下命令：\n1 hugo 或携带一些参数\n1 hugo --theme=stack --baseUrl=\u0026#34;https://blog.reincarnatey.net/\u0026#34; 随后可以看到根目录下出现了 public 文件夹，该文件夹下就是生成的静态网页。你可以将该文件夹内的文件上传到服务器，或是 push 到你的 github 仓库部署到你使用的托管服务，访问你的域名就可以看到了。\n7.将博客项目部署到GitHub上 先创建一个仓库\n以下是我创建好后传入仓库的图片 创建仓库时以\u0026lt;用户名小写\u0026gt;.github.io，例如我叫Demonskirito 仓库就命名为 demonskirito.github.io\n在项目中将已生成的静态代码的文件夹（public）上传至当前仓库即可\n1 2 3 4 5 6 7 ##先进入public文件夹 git init git add . git commit -m\u0026#34;我的博客\u0026#34; git remote add origin https://github.com/Demonskirito/demonskirito.github.io.git git branch -M main git push -u origin main 在上传https时我经常会遇见这个问题\n1 E:\\Study\\blog-hugo\\hugo-test\\public\u0026gt;git push -u origin main fatal: unable to access \u0026#39;https://github.com/Demonskirito/demonskirito.github.io.git/\u0026#39;: Failed to connect to 127.0.0.1 port 7897 after 2084 ms: Couldn\u0026#39;t connect to server 可以通过以下方法解决\n清除 Git 全局代理设置\n1 2 git config --global --unset http.proxy git config --global --unset https.proxy 清除系统代理（如果设置了环境变量） 在 Windows 中，打开命令提示符（cmd）或 PowerShell，执行：\n1 2 set http_proxy= set https_proxy= 检查直接访问 GitHub 测试是否可以直接访问 GitHub：\n1 curl https://github.com 重新尝试 Git 推送 如果可以直接访问，重新推送代码：\n1 git push -u origin main 实在不行就改用 SSH 连接，这个肯定行\n1 2 3 git remote set-url origin git@github.com:Demonskirito/demonskirito.git git push origin master 当我们将项目推送上github上后，我们就可以去访问demonskirito.github.io，这时你就可以发现我们成功访问我们的前端页面。\n对于github的项目，我们也可以去绑定域名使用。\n8.GitHub仓库绑定域名 8.1 namecheap解析DNS、GitHub配置域名 我使用的是外国域名的提供网站namecheap，在这里你可以买到外国域名，并配置解析dns\n这里我们来详细的说说如何用namecheap解析github pages\n我们在namecheap中添加CNAME记录\n添加一个新的 DNS 记录：\n记录类型：CNAME 主机名（或名称/别名）：www 值（或目标/指向）：demonskirito.github.io TTL：默认即可（通常为 300 秒或 自动）。 8.2 验证根域名（可选） 如果你想让 wuhan.com（不带 www）也指向 GitHub Pages：\n通过 GitHub 的官方推荐，你需要配置一个 A 记录 指向以下 GitHub Pages 的 IP 地址：\n185.199.108.153 185.199.109.153 185.199.110.153 185.199.111.153 配置示例：\n记录类型：A 主机名：@（或留空） 值：上述 IP 地址之一（重复添加多个记录，每条记录对应一个 IP 地址） 如果域名服务商支持 ALIAS 或 ANAME，你可以使用它们直接指向 demonskirito.github.io，但大多数情况下直接使用上述 A 记录即可。\n8.3 等待 DNS 生效 DNS 修改后可能需要一些时间传播，通常 10 分钟到 24 小时不等。你可以使用以下命令检查 DNS 是否正确：\n1 nslookup www.wuhan.com 应该返回以下类似的结果\n1 CNAME demonskirito.github.io 8.4 验证访问 通过浏览器访问 www.wuhan.com 确认是否正确指向你的 GitHub Pages。 如果依然出现问题，请检查 DNS 配置是否生效，或使用工具（如 https://dnschecker.org）验证你的 DNS 配置。 9.参考文献 Hugo+github部署：\n使用Hugo+Github从0开始免费搭建个人博客_hugo github-CSDN博客\n建站技术 | 使用 Hugo + Stack 简单搭建一个博客\n【Hugo】Hugo + Github 免费部署自己的博客\n10.版权信息 该博客归Demonskirito所有\n","date":"2024-12-16T10:30:44+08:00","permalink":"https://demonskirito.github.io/p/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF-hugo--github-%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2/","title":"建站技术 | HUGO + GitHub 创建博客页面"}]